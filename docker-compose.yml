
version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: auction-backend
    ports:
      - "${PORT:-3000}:3000"
      - "9229:9229"  # Debug port (only used in development)
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3000
      - AUTH_TOKEN=${AUTH_TOKEN:-dev-token}
      - ENCRYPTION_SECRET=${ENCRYPTION_SECRET:-dev-encryption-key-change-in-production}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - REDIS_URL=redis://redis:6379
      - DEBUG=${DEBUG:-}
      - ALLOWED_EXTENSION_IDS=${ALLOWED_EXTENSION_IDS:-}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-}
    volumes:
      # Development volumes - disabled in production via env var
      - ${SRC_VOLUME:-./backend/src:/app/src}
      - /app/node_modules  # Prevent node_modules from being overwritten
      - ./backend/logs:/app/logs
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - auction-network

  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: auction-dashboard
    ports:
      - "${DASHBOARD_PORT:-3001}:3001"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=3001
      - BACKEND_URL=http://backend:3000
      - EXTERNAL_BACKEND_URL=http://localhost:3000
      - EXTERNAL_WS_URL=ws://localhost:3000
    volumes:
      - ./dashboard/src:/app/src
      - ./dashboard/server.js:/app/server.js
      - /app/node_modules
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - auction-network

  redis:
    image: redis:7-alpine
    container_name: auction-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --appendfsync everysec
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - auction-network

networks:
  auction-network:
    driver: bridge

volumes:
  redis-data: