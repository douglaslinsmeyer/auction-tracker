# Production overrides for Nellis Auction Helper
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
# Or with env file: docker-compose --env-file .env.production up -d

services:
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
      target: production
      args:
        - NODE_ENV=production
    image: nellis-backend:latest
    ports:
      - "${BACKEND_PORT:-3000}:3000"  # No debug port in production
    environment:
      - NODE_ENV=production
      - DEBUG=  # Disable debug logging
      - LOG_LEVEL=${LOG_LEVEL:-warn}
      - AUTH_TOKEN=${AUTH_TOKEN:?AUTH_TOKEN is required in production}
      # Performance tuning
      - NODE_OPTIONS=--max-old-space-size=256
      - UV_THREADPOOL_SIZE=4
      # Security
      - HELMET_ENABLED=true
      - RATE_LIMIT_ENABLED=true
      - API_RATE_LIMIT_MAX=100
      - WS_MAX_CONNECTIONS_PER_IP=5
    volumes:
      # Only logs volume in production (no source code mounting)
      - ./logs/backend:/app/logs:rw
      - /app/node_modules
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=backend,env=production"

  dashboard:
    build:
      context: ./dashboard
      dockerfile: ./Dockerfile
      target: production
      args:
        - NODE_ENV=production
    image: nellis-dashboard:latest
    ports:
      - "${DASHBOARD_PORT:-3001}:3001"
    environment:
      - NODE_ENV=production
      - BACKEND_URL=${BACKEND_URL:-http://backend:3000}
    volumes: []  # No volumes in production
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=dashboard,env=production"

  redis:
    image: redis:7-alpine
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 128mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --requirepass ${REDIS_PASSWORD:-}
      --bind 0.0.0.0
      --protected-mode yes
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis-data:/data:rw
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=redis,env=production"

  # Nginx reverse proxy for SSL termination (optional)
  nginx:
    image: nginx:alpine
    container_name: auction-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx:rw
    depends_on:
      - backend
      - dashboard
    restart: always
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=nginx,env=production"

volumes:
  redis-data:
    driver: local
  nginx-cache:
    driver: local

networks:
  default:
    name: nellis-prod-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16