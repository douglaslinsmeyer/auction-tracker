
> nellis-auction-backend@1.0.0 test:bdd
> cucumber-js tests/bdd/features --require tests/bdd/step-definitions --require tests/bdd/support

Swagger UI available at /api-docs
Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...A----.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....F-.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....A.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....A.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....A.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....A.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....A.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....A.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....A.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....A.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....F.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
......F.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...A-A-.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...A-A-.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...A---.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...A---A.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
........Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
........Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....F.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...Auth request received: {
  body: { cookies: 'session=abc123; auth=def456' },
  headers: {
    host: '127.0.0.1:35745',
    'accept-encoding': 'gzip, deflate',
    'content-type': 'application/json',
    'content-length': '41',
    connection: 'close'
  },
  contentType: 'application/json'
}
Authentication not yet implemented - using provided cookies
2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
.A-.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...Auth request received: {
  body: { cookies: 'test=cookie' },
  headers: {
    host: '127.0.0.1:37453',
    'accept-encoding': 'gzip, deflate',
    'content-type': 'application/json',
    'content-length': '25',
    connection: 'close'
  },
  contentType: 'application/json'
}
Authentication not yet implemented - using provided cookies
2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
...Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....F.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...Successfully fetched auction data: {
  id: 57938394,
  title: 'Grelife 3-in-1 Portable Air Conditioner, 400 Sq.Ft Evaporative Air Cooler with 1.72Gal Tank & 4 Ice Packs, 360Â° Oscillation, 30ft/s Wind Speed, 42dB Quiet, 8H Timer for Bedroom/Office/Home',
  currentBid: 53,
  isWinning: false
}
.....Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
....Successfully fetched auction data: {
  id: 57938394,
  title: 'Grelife 3-in-1 Portable Air Conditioner, 400 Sq.Ft Evaporative Air Cooler with 1.72Gal Tank & 4 Ice Packs, 360Â° Oscillation, 30ft/s Wind Speed, 42dB Quiet, 8H Timer for Bedroom/Office/Home',
  currentBid: 53,
  isWinning: false
}
..F.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
........Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
....A-.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...AA.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
....AA-.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...U---.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...AU--.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...U---.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....A.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....A.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....A.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....A.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....A.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....A.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....A.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....A.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...UU-.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
....UU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...AUA-.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...AUA-.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...AU--.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...AU--A.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
....UU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...U---.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...UU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...UU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...UA-.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...U-.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...UU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...U---.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
....U--.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...U---.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...U-.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...UA-.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...UA.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
....UA-.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...U---.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUA.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUAU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UU-.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUU-U.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UU-U.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUAAUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUAUU-U.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUU-U.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUAUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUAU-.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUAUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUU-U.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUA--U.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUAUU-U.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUU-U.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUAU---.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
..F-------..Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.F--AA--.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
..F------..Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.F-AA-.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
..F-----..Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.F---A-.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.F---A-.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.F--UUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.F--UUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.F--UUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.F--UUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.F--UUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.F--UUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
..........A--------A--A--.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...........A------.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....AA-----.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
........A-----.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......A-A-.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...............Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...A---A-----.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...A---------.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.U-UUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.U-UUUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UAUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UAUUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUAUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.UUUUUUU.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
....A-A.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
...A--.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.........Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....F-.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
........Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...Authentication not yet implemented - using provided cookies
.FA.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
........Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.........Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.........Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
......A.Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
..........Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.........Auction monitor shut down
......Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
........Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
......Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
........Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.F-----.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.F------.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.F------.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.F------.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.F------.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.F--------.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.F-------.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
....F--.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
....A--.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
........Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
........Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
......Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 1 persisted auctions
Updating auction test-123
Recovered auction test-123: Test Auction
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 1 persisted auctions
Updating auction test-123
Recovered auction test-123: Test Auction
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
........Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 1 persisted auctions
Updating auction test-123
Recovered auction test-123: Test Auction
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 3 persisted auctions
Updating auction test-123
Recovered auction test-123: Test Auction
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 3 persisted auctions
Updating auction test-123
Recovered auction test-123: Test Auction
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 3 persisted auctions
Updating auction test-123
Recovered auction test-123: Test Auction
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
........Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 3 persisted auctions
Updating auction test-123
Recovered auction test-123: Test Auction
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 3 persisted auctions
Updating auction test-123
Recovered auction test-123: Test Auction
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....F--.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 3 persisted auctions
Updating auction test-123
Recovered auction test-123: Test Auction
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 3 persisted auctions
Updating auction test-123
Recovered auction test-123: Test Auction
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 3 persisted auctions
Updating auction test-123
Recovered auction test-123: Test Auction
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.....F.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 3 persisted auctions
Updating auction test-123
Recovered auction test-123: Test Auction
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
......Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 3 persisted auctions
Updating auction test-123
Recovered auction test-123: Test Auction
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 3 persisted auctions
Updating auction test-123
Recovered auction test-123: Test Auction
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
........Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.........Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
....F-AA.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
......AU.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...AA-.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...AA-.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...AA-.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...AA-.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...FAU.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...FA-.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
........Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...A---.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...F---.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...F-A-.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...A-A---.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...AA-A--.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...A-A-.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.......Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...AA--.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.........Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...F--.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
....AA.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...A-.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
...F--A.Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
........Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
.........Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
........Auction monitor shut down
......2025-06-29 09:12:03 [[32MINFO[39M]: Authentication activity {"action":"cookie=[REDACTED]","success":true}
Recovering persisted auction state...
Found 2 persisted auctions
Updating auction undefined
Recovered auction undefined: undefined
Updating auction undefined
Recovered auction undefined: undefined
Auction cleanup timer started (runs every 300 seconds)
Auction monitor initialized with persistence
....A.Auction monitor shut down
......

Failures:

1) Scenario: Get all monitored auctions # tests/bdd/features/api-routes-simplified.feature:10
   â Before # tests/bdd/support/hooks.js:29
   â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
   â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
   â Given 5 auctions are being monitored
       Multiple step definitions match:
         {int} auctions are being monitored - tests/bdd/step-definitions/api-routes.steps.js:139       
         {int} auctions are being monitored - tests/bdd/step-definitions/integration-flows.steps.js:525
   - When I make a GET request to "/api/auctions" # tests/bdd/step-definitions/api-routes.steps.js:25
   - Then the response should be successful # tests/bdd/step-definitions/api-routes.steps.js:99
   - And the response should include 5 auctions # tests/bdd/step-definitions/api-routes.steps.js:129
   - And success should be true # tests/bdd/step-definitions/api-routes.steps.js:223
   â After # tests/bdd/support/hooks.js:103
   â After # tests/bdd/support/hooks.js:42
   â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
   â After # tests/bdd/step-definitions/storage-service.steps.js:459
   â After # tests/bdd/step-definitions/nellis-api.steps.js:400
   â After # tests/bdd/step-definitions/integration-flows.steps.js:673
   â After # tests/bdd/step-definitions/api-routes.steps.js:482

2) Scenario: Get specific auction details # tests/bdd/features/api-routes-simplified.feature:17
   â Before # tests/bdd/support/hooks.js:29
   â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
   â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
   â When I make a GET request to "/api/auctions/12345" # tests/bdd/step-definitions/api-routes.steps.js:25
   â Then nellisApi.getAuctionData should be called with "12345" # tests/bdd/step-definitions/api-routes.steps.js:284
   â And response should include auction data # tests/bdd/step-definitions/api-routes.steps.js:228
       AssertionError: expected { success: true, data: { â¦(17) } } to have property 'auction'
           at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/api-routes.steps.js:229:38)
   - And errors should return 500 status # tests/bdd/step-definitions/api-routes.steps.js:233
   â After # tests/bdd/support/hooks.js:103
   â After # tests/bdd/support/hooks.js:42
   â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
   â After # tests/bdd/step-definitions/storage-service.steps.js:459
   â After # tests/bdd/step-definitions/nellis-api.steps.js:400
   â After # tests/bdd/step-definitions/integration-flows.steps.js:673
   â After # tests/bdd/step-definitions/api-routes.steps.js:482

3) Scenario: Validate auction configuration # tests/bdd/features/api-routes-simplified.feature:31
   â Before # tests/bdd/support/hooks.js:29
   â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
   â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
   â When config is validated with strategy = "invalid" # tests/bdd/step-definitions/api-routes.steps.js:182
   â Then validation should fail # tests/bdd/step-definitions/api-routes.steps.js:198
   â And error should be "Invalid strategy"
       Multiple step definitions match:
         error should be {string} - tests/bdd/step-definitions/api-routes.steps.js:208       
         error should be {string} - tests/bdd/step-definitions/websocket-handler.steps.js:115
   â After # tests/bdd/support/hooks.js:103
   â After # tests/bdd/support/hooks.js:42
   â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
   â After # tests/bdd/step-definitions/storage-service.steps.js:459
   â After # tests/bdd/step-definitions/nellis-api.steps.js:400
   â After # tests/bdd/step-definitions/integration-flows.steps.js:673
   â After # tests/bdd/step-definitions/api-routes.steps.js:482

4) Scenario: Validate auction configuration # tests/bdd/features/api-routes-simplified.feature:32
   â Before # tests/bdd/support/hooks.js:29
   â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
   â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
   â When config is validated with maxBid = 0 # tests/bdd/step-definitions/api-routes.steps.js:188
   â Then validation should fail # tests/bdd/step-definitions/api-routes.steps.js:198
   â And error should be "maxBid must be greater than 0"
       Multiple step definitions match:
         error should be {string} - tests/bdd/step-definitions/api-routes.steps.js:208       
         error should be {string} - tests/bdd/step-definitions/websocket-handler.steps.js:115
   â After # tests/bdd/support/hooks.js:103
   â After # tests/bdd/support/hooks.js:42
   â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
   â After # tests/bdd/step-definitions/storage-service.steps.js:459
   â After # tests/bdd/step-definitions/nellis-api.steps.js:400
   â After # tests/bdd/step-definitions/integration-flows.steps.js:673
   â After # tests/bdd/step-definitions/api-routes.steps.js:482

5) Scenario: Validate auction configuration # tests/bdd/features/api-routes-simplified.feature:33
   â Before # tests/bdd/support/hooks.js:29
   â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
   â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
   â When config is validated with maxBid = 10001 # tests/bdd/step-definitions/api-routes.steps.js:188
   â Then validation should fail # tests/bdd/step-definitions/api-routes.steps.js:198
   â And error should be "maxBid cannot exceed $10,000"
       Multiple step definitions match:
         error should be {string} - tests/bdd/step-definitions/api-routes.steps.js:208       
         error should be {string} - tests/bdd/step-definitions/websocket-handler.steps.js:115
   â After # tests/bdd/support/hooks.js:103
   â After # tests/bdd/support/hooks.js:42
   â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
   â After # tests/bdd/step-definitions/storage-service.steps.js:459
   â After # tests/bdd/step-definitions/nellis-api.steps.js:400
   â After # tests/bdd/step-definitions/integration-flows.steps.js:673
   â After # tests/bdd/step-definitions/api-routes.steps.js:482

6) Scenario: Validate auction configuration # tests/bdd/features/api-routes-simplified.feature:34
   â Before # tests/bdd/support/hooks.js:29
   â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
   â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
   â When config is validated with maxBid = "abc" # tests/bdd/step-definitions/api-routes.steps.js:182
   â Then validation should fail # tests/bdd/step-definitions/api-routes.steps.js:198
   â And error should be "maxBid must be a valid number"
       Multiple step definitions match:
         error should be {string} - tests/bdd/step-definitions/api-routes.steps.js:208       
         error should be {string} - tests/bdd/step-definitions/websocket-handler.steps.js:115
   â After # tests/bdd/support/hooks.js:103
   â After # tests/bdd/support/hooks.js:42
   â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
   â After # tests/bdd/step-definitions/storage-service.steps.js:459
   â After # tests/bdd/step-definitions/nellis-api.steps.js:400
   â After # tests/bdd/step-definitions/integration-flows.steps.js:673
   â After # tests/bdd/step-definitions/api-routes.steps.js:482

7) Scenario: Validate auction configuration # tests/bdd/features/api-routes-simplified.feature:35
   â Before # tests/bdd/support/hooks.js:29
   â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
   â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
   â When config is validated with dailyLimit = 50001 # tests/bdd/step-definitions/api-routes.steps.js:188
   â Then validation should fail # tests/bdd/step-definitions/api-routes.steps.js:198
   â And error should be "dailyLimit cannot exceed $50,000"
       Multiple step definitions match:
         error should be {string} - tests/bdd/step-definitions/api-routes.steps.js:208       
         error should be {string} - tests/bdd/step-definitions/websocket-handler.steps.js:115
   â After # tests/bdd/support/hooks.js:103
   â After # tests/bdd/support/hooks.js:42
   â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
   â After # tests/bdd/step-definitions/storage-service.steps.js:459
   â After # tests/bdd/step-definitions/nellis-api.steps.js:400
   â After # tests/bdd/step-definitions/integration-flows.steps.js:673
   â After # tests/bdd/step-definitions/api-routes.steps.js:482

8) Scenario: Validate auction configuration # tests/bdd/features/api-routes-simplified.feature:36
   â Before # tests/bdd/support/hooks.js:29
   â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
   â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
   â When config is validated with totalLimit = 100001 # tests/bdd/step-definitions/api-routes.steps.js:188
   â Then validation should fail # tests/bdd/step-definitions/api-routes.steps.js:198
   â And error should be "totalLimit cannot exceed $100,000"
       Multiple step definitions match:
         error should be {string} - tests/bdd/step-definitions/api-routes.steps.js:208       
         error should be {string} - tests/bdd/step-definitions/websocket-handler.steps.js:115
   â After # tests/bdd/support/hooks.js:103
   â After # tests/bdd/support/hooks.js:42
   â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
   â After # tests/bdd/step-definitions/storage-service.steps.js:459
   â After # tests/bdd/step-definitions/nellis-api.steps.js:400
   â After # tests/bdd/step-definitions/integration-flows.steps.js:673
   â After # tests/bdd/step-definitions/api-routes.steps.js:482

9) Scenario: Validate auction configuration # tests/bdd/features/api-routes-simplified.feature:37
   â Before # tests/bdd/support/hooks.js:29
   â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
   â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
   â When config is validated with increment = 1001 # tests/bdd/step-definitions/api-routes.steps.js:188
   â Then validation should fail # tests/bdd/step-definitions/api-routes.steps.js:198
   â And error should be "increment cannot exceed $1,000"
       Multiple step definitions match:
         error should be {string} - tests/bdd/step-definitions/api-routes.steps.js:208       
         error should be {string} - tests/bdd/step-definitions/websocket-handler.steps.js:115
   â After # tests/bdd/support/hooks.js:103
   â After # tests/bdd/support/hooks.js:42
   â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
   â After # tests/bdd/step-definitions/storage-service.steps.js:459
   â After # tests/bdd/step-definitions/nellis-api.steps.js:400
   â After # tests/bdd/step-definitions/integration-flows.steps.js:673
   â After # tests/bdd/step-definitions/api-routes.steps.js:482

10) Scenario: Validate auction configuration # tests/bdd/features/api-routes-simplified.feature:38
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â When config is validated with enabled = "yes" # tests/bdd/step-definitions/api-routes.steps.js:182
    â Then validation should fail # tests/bdd/step-definitions/api-routes.steps.js:198
    â And error should be "enabled must be a boolean value"
        Multiple step definitions match:
          error should be {string} - tests/bdd/step-definitions/api-routes.steps.js:208       
          error should be {string} - tests/bdd/step-definitions/websocket-handler.steps.js:115
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

11) Scenario: Start monitoring with validation # tests/bdd/features/api-routes-simplified.feature:46
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â When I send a POST to "/api/auctions/123/monitor" with invalid config # tests/bdd/step-definitions/api-routes.steps.js:65
    â Then the response should be a bad request # tests/bdd/step-definitions/api-routes.steps.js:103
    â And details should list validation errors # tests/bdd/step-definitions/api-routes.steps.js:239
        AssertionError: expected { success: false, â¦(3) } to have property 'errors'
            at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/api-routes.steps.js:240:38)
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

12) Scenario: Prevent duplicate monitoring # tests/bdd/features/api-routes-simplified.feature:51
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â Given auction "123" is already monitored # tests/bdd/step-definitions/api-routes.steps.js:151
    â When I send a POST to "/api/auctions/123/monitor" with maxBid 100 and strategy "increment" # tests/bdd/step-definitions/api-routes.steps.js:53
    â Then the response should be a bad request # tests/bdd/step-definitions/api-routes.steps.js:103
    â And the response should include error "Auction already being monitored" # tests/bdd/step-definitions/api-routes.steps.js:125
        AssertionError
            + expected - actual

            -Strategy must be one of: manual, aggressive, last-second, sniping
            +Auction already being monitored

            at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/api-routes.steps.js:126:39)
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

13) Scenario: Stop monitoring via DELETE # tests/bdd/features/api-routes-simplified.feature:58
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â Given auction "123" is being monitored
        Multiple step definitions match:
          auction {string} is being monitored - tests/bdd/step-definitions/api-routes.steps.js:155       
          auction {string} is being monitored - tests/bdd/step-definitions/websocket-handler.steps.js:274
    - When I make a DELETE request to "/api/auctions/123/monitor" # tests/bdd/step-definitions/api-routes.steps.js:43
    â Then monitoring should stop
        Multiple step definitions match:
          monitoring should stop - tests/bdd/step-definitions/api-routes.steps.js:244       
          monitoring should stop - tests/bdd/step-definitions/integration-flows.steps.js:143
    - And success message should be returned # tests/bdd/step-definitions/api-routes.steps.js:248
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

14) Scenario: Stop monitoring via POST (UI compatibility) # tests/bdd/features/api-routes-simplified.feature:64
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â Given auction "123" is being monitored
        Multiple step definitions match:
          auction {string} is being monitored - tests/bdd/step-definitions/api-routes.steps.js:155       
          auction {string} is being monitored - tests/bdd/step-definitions/websocket-handler.steps.js:274
    - When I make a POST request to "/api/auctions/123/stop" # tests/bdd/step-definitions/api-routes.steps.js:29
    â Then monitoring should stop
        Multiple step definitions match:
          monitoring should stop - tests/bdd/step-definitions/api-routes.steps.js:244       
          monitoring should stop - tests/bdd/step-definitions/integration-flows.steps.js:143
    - And endpoint should behave identically to DELETE # tests/bdd/step-definitions/api-routes.steps.js:254
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

15) Scenario: Clear all monitored auctions # tests/bdd/features/api-routes-simplified.feature:71
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â Given 10 auctions are being monitored
        Multiple step definitions match:
          {int} auctions are being monitored - tests/bdd/step-definitions/api-routes.steps.js:139       
          {int} auctions are being monitored - tests/bdd/step-definitions/integration-flows.steps.js:525
    - When I make a POST request to "/api/auctions/clear" # tests/bdd/step-definitions/api-routes.steps.js:29
    - Then all auctions should be removed # tests/bdd/step-definitions/api-routes.steps.js:258
    - And response should show cleared count of 10 # tests/bdd/step-definitions/api-routes.steps.js:262
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

16) Scenario: Update auction configuration with validation # tests/bdd/features/api-routes-simplified.feature:78
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â Given auction "123" is being monitored
        Multiple step definitions match:
          auction {string} is being monitored - tests/bdd/step-definitions/api-routes.steps.js:155       
          auction {string} is being monitored - tests/bdd/step-definitions/websocket-handler.steps.js:274
    - When I make a PUT request to "/api/auctions/123/config" with body: # tests/bdd/step-definitions/api-routes.steps.js:38
        """
        {"maxBid": 200, "strategy": "sniping"}
        """
    - Then config should be merged with existing # tests/bdd/step-definitions/api-routes.steps.js:266
    - And validation should run on merged config # tests/bdd/step-definitions/api-routes.steps.js:270
    â And auctionMonitor.updateAuctionConfig should be called
        Multiple step definitions match:
          auctionMonitor.updateAuctionConfig should be called - tests/bdd/step-definitions/api-routes.steps.js:293       
          {word} should be called                             - tests/bdd/step-definitions/websocket-handler.steps.js:156
          auctionMonitor.updateAuctionConfig should be called - tests/bdd/step-definitions/websocket-handler.steps.js:287
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

17) Scenario: Validate bid amount # tests/bdd/features/api-routes-simplified.feature:110
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â When I send a POST to "/api/auctions/123/bid" with amount 0 # tests/bdd/step-definitions/api-routes.steps.js:88
    â Then the response should be a bad request # tests/bdd/step-definitions/api-routes.steps.js:103
    â And the response should include error "Invalid bid amount" # tests/bdd/step-definitions/api-routes.steps.js:125
        AssertionError
            + expected - actual

            -Bid amount must be positive
            +Invalid bid amount

            at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/api-routes.steps.js:126:39)
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

18) Scenario: Set authentication cookies # tests/bdd/features/api-routes-simplified.feature:129
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â When I send a POST to "/api/auth" with cookies "session=abc123; auth=def456" # tests/bdd/step-definitions/api-routes.steps.js:76
    â Then nellisApi.authenticate should be called
        Multiple step definitions match:
          nellisApi.authenticate should be called - tests/bdd/step-definitions/api-routes.steps.js:298       
          {word} should be called                 - tests/bdd/step-definitions/websocket-handler.steps.js:156
    - And success status should be returned # tests/bdd/step-definitions/api-routes.steps.js:302
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

19) Scenario: Require cookies in auth request # tests/bdd/features/api-routes-simplified.feature:138
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â When I send a POST to "/api/auth" without cookies # tests/bdd/step-definitions/api-routes.steps.js:82
    â Then the response should be a bad request # tests/bdd/step-definitions/api-routes.steps.js:103
    â And the response should include error "Cookies required" # tests/bdd/step-definitions/api-routes.steps.js:125
        AssertionError
            + expected - actual

            -Cookies are required
            +Cookies required

            at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/api-routes.steps.js:126:39)
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

20) Scenario: Test bid placement during validation # tests/bdd/features/api-routes-simplified.feature:150
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â Given testBidAmount is provided # tests/bdd/step-definitions/api-routes.steps.js:177
    â When I make a POST request to "/api/auth/validate" # tests/bdd/step-definitions/api-routes.steps.js:29
    â Then safe bid amount should be used (below current) # tests/bdd/step-definitions/api-routes.steps.js:329
    â And bid test result should be included # tests/bdd/step-definitions/api-routes.steps.js:333
        AssertionError: expected { success: true, â¦(6) } to have property 'bidTest'
            at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/api-routes.steps.js:335:40)
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

21) Scenario: Get global settings # tests/bdd/features/api-routes-simplified.feature:175
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â When I make a GET request to "/api/settings" # tests/bdd/step-definitions/api-routes.steps.js:25
    â Then storage.getSettings should be called
        Multiple step definitions match:
          storage.getSettings should be called - tests/bdd/step-definitions/api-routes.steps.js:352       
          {word} should be called              - tests/bdd/step-definitions/websocket-handler.steps.js:156
    - And current settings should be returned # tests/bdd/step-definitions/api-routes.steps.js:356
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

22) Scenario: Validate settings structure # tests/bdd/features/api-routes-simplified.feature:180
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â When I make a POST request to "/api/settings" with body:
        """
        {
          "defaultMaxBid": 15000,
          "defaultStrategy": "invalid",
          "snipeTiming": 50,
          "bidBuffer": 150,
          "retryAttempts": 15
        }
        """
        Multiple step definitions match:
          I make a POST request to {string} with body: - tests/bdd/step-definitions/api-routes.steps.js:33        
          I make a POST request to {string} with body: - tests/bdd/step-definitions/auction-monitoring.steps.js:83
    â Then validation should check:
        | Setting         | Validation                       |
        | defaultMaxBid   | Between 1 and 10000              |
        | defaultStrategy | Must be "increment" or "sniping" |
        | snipeTiming     | Between 1 and 30 seconds         |
        | bidBuffer       | Between 0 and 100                |
        | retryAttempts   | Between 1 and 10                 |
        Multiple step definitions match:
          validation should {word} - tests/bdd/step-definitions/api-routes.steps.js:198
          validation should check: - tests/bdd/step-definitions/api-routes.steps.js:394
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

23) Scenario: Save valid settings # tests/bdd/features/api-routes-simplified.feature:199
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â Given settings pass validation # tests/bdd/step-definitions/api-routes.steps.js:167
    â When I make a POST request to "/api/settings" with body:
        """
        {
          "defaultMaxBid": 150,
          "defaultStrategy": "increment",
          "snipeTiming": 15,
          "bidBuffer": 25,
          "retryAttempts": 3
        }
        """
        Multiple step definitions match:
          I make a POST request to {string} with body: - tests/bdd/step-definitions/api-routes.steps.js:33        
          I make a POST request to {string} with body: - tests/bdd/step-definitions/auction-monitoring.steps.js:83
    â Then storage.saveSettings should be called
        Multiple step definitions match:
          storage.saveSettings should be called - tests/bdd/step-definitions/api-routes.steps.js:360       
          {word} should be called               - tests/bdd/step-definitions/websocket-handler.steps.js:156
    - And updated settings should be returned # tests/bdd/step-definitions/api-routes.steps.js:364
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

24) Scenario: Log and return errors consistently # tests/bdd/features/api-routes-simplified.feature:215
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    ? When any endpoint throws an error
        Undefined. Implement with the following snippet:

          When('any endpoint throws an error', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - Then error should be logged with context # tests/bdd/step-definitions/api-routes.steps.js:368
    - And 500 status should be returned # tests/bdd/step-definitions/api-routes.steps.js:373
    - And error message should be in response # tests/bdd/step-definitions/api-routes.steps.js:377
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

25) Scenario: Get all monitored auctions # tests/bdd/features/api-routes.feature:10
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â Given 5 auctions are being monitored
        Multiple step definitions match:
          {int} auctions are being monitored - tests/bdd/step-definitions/api-routes.steps.js:139       
          {int} auctions are being monitored - tests/bdd/step-definitions/integration-flows.steps.js:525
    ? When GET /api/auctions is called
        Undefined. Implement with the following snippet:

          When('GET \\/api\\/auctions is called', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - Then response should include all 5 auctions # tests/bdd/step-definitions/api-routes.steps.js:217
    - And success should be true # tests/bdd/step-definitions/api-routes.steps.js:223
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

26) Scenario: Get specific auction details # tests/bdd/features/api-routes.feature:16
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    ? When GET /api/auctions/12345 is called
        Undefined. Implement with the following snippet:

          When('GET \\/api\\/auctions\\/{int} is called', async function (int) {
          // When('GET \\/api\\/auctions\\/{float} is called', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - Then nellisApi.getAuctionData should be called with "12345" # tests/bdd/step-definitions/api-routes.steps.js:284
    - And response should include auction data # tests/bdd/step-definitions/api-routes.steps.js:228
    - And errors should return 500 status # tests/bdd/step-definitions/api-routes.steps.js:233
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

27) Scenario: Validate auction configuration # tests/bdd/features/api-routes.feature:30
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â When config is validated with strategy = "invalid" # tests/bdd/step-definitions/api-routes.steps.js:182
    â Then validation should fail # tests/bdd/step-definitions/api-routes.steps.js:198
    â And error should be "Invalid strategy"
        Multiple step definitions match:
          error should be {string} - tests/bdd/step-definitions/api-routes.steps.js:208       
          error should be {string} - tests/bdd/step-definitions/websocket-handler.steps.js:115
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

28) Scenario: Validate auction configuration # tests/bdd/features/api-routes.feature:31
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â When config is validated with maxBid = 0 # tests/bdd/step-definitions/api-routes.steps.js:188
    â Then validation should fail # tests/bdd/step-definitions/api-routes.steps.js:198
    â And error should be "maxBid must be greater than 0"
        Multiple step definitions match:
          error should be {string} - tests/bdd/step-definitions/api-routes.steps.js:208       
          error should be {string} - tests/bdd/step-definitions/websocket-handler.steps.js:115
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

29) Scenario: Validate auction configuration # tests/bdd/features/api-routes.feature:32
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â When config is validated with maxBid = 10001 # tests/bdd/step-definitions/api-routes.steps.js:188
    â Then validation should fail # tests/bdd/step-definitions/api-routes.steps.js:198
    â And error should be "maxBid cannot exceed $10,000"
        Multiple step definitions match:
          error should be {string} - tests/bdd/step-definitions/api-routes.steps.js:208       
          error should be {string} - tests/bdd/step-definitions/websocket-handler.steps.js:115
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

30) Scenario: Validate auction configuration # tests/bdd/features/api-routes.feature:33
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â When config is validated with maxBid = "abc" # tests/bdd/step-definitions/api-routes.steps.js:182
    â Then validation should fail # tests/bdd/step-definitions/api-routes.steps.js:198
    â And error should be "maxBid must be a valid number"
        Multiple step definitions match:
          error should be {string} - tests/bdd/step-definitions/api-routes.steps.js:208       
          error should be {string} - tests/bdd/step-definitions/websocket-handler.steps.js:115
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

31) Scenario: Validate auction configuration # tests/bdd/features/api-routes.feature:34
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â When config is validated with dailyLimit = 50001 # tests/bdd/step-definitions/api-routes.steps.js:188
    â Then validation should fail # tests/bdd/step-definitions/api-routes.steps.js:198
    â And error should be "dailyLimit cannot exceed $50,000"
        Multiple step definitions match:
          error should be {string} - tests/bdd/step-definitions/api-routes.steps.js:208       
          error should be {string} - tests/bdd/step-definitions/websocket-handler.steps.js:115
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

32) Scenario: Validate auction configuration # tests/bdd/features/api-routes.feature:35
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â When config is validated with totalLimit = 100001 # tests/bdd/step-definitions/api-routes.steps.js:188
    â Then validation should fail # tests/bdd/step-definitions/api-routes.steps.js:198
    â And error should be "totalLimit cannot exceed $100,000"
        Multiple step definitions match:
          error should be {string} - tests/bdd/step-definitions/api-routes.steps.js:208       
          error should be {string} - tests/bdd/step-definitions/websocket-handler.steps.js:115
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

33) Scenario: Validate auction configuration # tests/bdd/features/api-routes.feature:36
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â When config is validated with increment = 1001 # tests/bdd/step-definitions/api-routes.steps.js:188
    â Then validation should fail # tests/bdd/step-definitions/api-routes.steps.js:198
    â And error should be "increment cannot exceed $1,000"
        Multiple step definitions match:
          error should be {string} - tests/bdd/step-definitions/api-routes.steps.js:208       
          error should be {string} - tests/bdd/step-definitions/websocket-handler.steps.js:115
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

34) Scenario: Validate auction configuration # tests/bdd/features/api-routes.feature:37
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â When config is validated with enabled = "yes" # tests/bdd/step-definitions/api-routes.steps.js:182
    â Then validation should fail # tests/bdd/step-definitions/api-routes.steps.js:198
    â And error should be "enabled must be a boolean value"
        Multiple step definitions match:
          error should be {string} - tests/bdd/step-definitions/api-routes.steps.js:208       
          error should be {string} - tests/bdd/step-definitions/websocket-handler.steps.js:115
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

35) Scenario: Start monitoring with validation # tests/bdd/features/api-routes.feature:45
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    ? When POST /api/auctions/123/monitor with invalid config
        Undefined. Implement with the following snippet:

          When('POST \\/api\\/auctions\\/{int}\\/monitor with invalid config', async function (int) {
          // When('POST \\/api\\/auctions\\/{float}\\/monitor with invalid config', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then response should be 400 Bad Request
        Undefined. Implement with the following snippet:

          Then('response should be {int} Bad Request', async function (int) {
          // Then('response should be {float} Bad Request', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - And details should list validation errors # tests/bdd/step-definitions/api-routes.steps.js:239
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

36) Scenario: Prevent duplicate monitoring # tests/bdd/features/api-routes.feature:50
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â Given auction "123" is already monitored # tests/bdd/step-definitions/api-routes.steps.js:151
    ? When POST /api/auctions/123/monitor is called
        Undefined. Implement with the following snippet:

          When('POST \\/api\\/auctions\\/{int}\\/monitor is called', async function (int) {
          // When('POST \\/api\\/auctions\\/{float}\\/monitor is called', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then response should be 400 with "Auction already being monitored"
        Undefined. Implement with the following snippet:

          Then('response should be {int} with {string}', async function (int, string) {
          // Then('response should be {float} with {string}', async function (float, string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

37) Scenario: Stop monitoring via DELETE # tests/bdd/features/api-routes.feature:56
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â Given auction "123" is being monitored
        Multiple step definitions match:
          auction {string} is being monitored - tests/bdd/step-definitions/api-routes.steps.js:155       
          auction {string} is being monitored - tests/bdd/step-definitions/websocket-handler.steps.js:274
    ? When DELETE /api/auctions/123/monitor is called
        Undefined. Implement with the following snippet:

          When('DELETE \\/api\\/auctions\\/{int}\\/monitor is called', async function (int) {
          // When('DELETE \\/api\\/auctions\\/{float}\\/monitor is called', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â Then monitoring should stop
        Multiple step definitions match:
          monitoring should stop - tests/bdd/step-definitions/api-routes.steps.js:244       
          monitoring should stop - tests/bdd/step-definitions/integration-flows.steps.js:143
    - And success message should be returned # tests/bdd/step-definitions/api-routes.steps.js:248
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

38) Scenario: Stop monitoring via POST (UI compatibility) # tests/bdd/features/api-routes.feature:62
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â Given auction "123" is being monitored
        Multiple step definitions match:
          auction {string} is being monitored - tests/bdd/step-definitions/api-routes.steps.js:155       
          auction {string} is being monitored - tests/bdd/step-definitions/websocket-handler.steps.js:274
    ? When POST /api/auctions/123/stop is called
        Undefined. Implement with the following snippet:

          When('POST \\/api\\/auctions\\/{int}\\/stop is called', async function (int) {
          // When('POST \\/api\\/auctions\\/{float}\\/stop is called', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â Then monitoring should stop
        Multiple step definitions match:
          monitoring should stop - tests/bdd/step-definitions/api-routes.steps.js:244       
          monitoring should stop - tests/bdd/step-definitions/integration-flows.steps.js:143
    - And endpoint should behave identically to DELETE # tests/bdd/step-definitions/api-routes.steps.js:254
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

39) Scenario: Clear all monitored auctions # tests/bdd/features/api-routes.feature:69
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â Given 10 auctions are being monitored
        Multiple step definitions match:
          {int} auctions are being monitored - tests/bdd/step-definitions/api-routes.steps.js:139       
          {int} auctions are being monitored - tests/bdd/step-definitions/integration-flows.steps.js:525
    ? When POST /api/auctions/clear is called
        Undefined. Implement with the following snippet:

          When('POST \\/api\\/auctions\\/clear is called', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - Then all auctions should be removed # tests/bdd/step-definitions/api-routes.steps.js:258
    - And response should show cleared count of 10 # tests/bdd/step-definitions/api-routes.steps.js:262
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

40) Scenario: Update auction configuration with validation # tests/bdd/features/api-routes.feature:76
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â Given auction "123" is being monitored
        Multiple step definitions match:
          auction {string} is being monitored - tests/bdd/step-definitions/api-routes.steps.js:155       
          auction {string} is being monitored - tests/bdd/step-definitions/websocket-handler.steps.js:274
    ? When PUT /api/auctions/123/config with new settings
        Undefined. Implement with the following snippet:

          When('PUT \\/api\\/auctions\\/{int}\\/config with new settings', async function (int) {
          // When('PUT \\/api\\/auctions\\/{float}\\/config with new settings', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - Then config should be merged with existing # tests/bdd/step-definitions/api-routes.steps.js:266
    - And validation should run on merged config # tests/bdd/step-definitions/api-routes.steps.js:270
    â And auctionMonitor.updateAuctionConfig should be called
        Multiple step definitions match:
          auctionMonitor.updateAuctionConfig should be called - tests/bdd/step-definitions/api-routes.steps.js:293       
          {word} should be called                             - tests/bdd/step-definitions/websocket-handler.steps.js:156
          auctionMonitor.updateAuctionConfig should be called - tests/bdd/step-definitions/websocket-handler.steps.js:287
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

41) Scenario: Reject config update for non-monitored auction # tests/bdd/features/api-routes.feature:83
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â Given auction "999" is not monitored # tests/bdd/step-definitions/api-routes.steps.js:159
    ? When PUT /api/auctions/999/config is called
        Undefined. Implement with the following snippet:

          When('PUT \\/api\\/auctions\\/{int}\\/config is called', async function (int) {
          // When('PUT \\/api\\/auctions\\/{float}\\/config is called', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then response should be 404 "Auction not being monitored"
        Undefined. Implement with the following snippet:

          Then('response should be {int} {string}', async function (int, string) {
          // Then('response should be {float} {string}', async function (float, string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

42) Scenario: Get bid history with limit # tests/bdd/features/api-routes.feature:89
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    ? When GET /api/auctions/123/bids?limit=50 is called
        Undefined. Implement with the following snippet:

          When('GET \\/api\\/auctions\\/{int}\\/bids?limit={int} is called', async function (int, int2) {
          // When('GET \\/api\\/auctions\\/{int}\\/bids?limit={float} is called', async function (int, float) {
          // When('GET \\/api\\/auctions\\/{float}\\/bids?limit={int} is called', async function (float, int) {
          // When('GET \\/api\\/auctions\\/{float}\\/bids?limit={float} is called', async function (float, float2) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - Then storage.getBidHistory should be called with limit 50 # tests/bdd/step-definitions/api-routes.steps.js:289
    - And response should include bidHistory array # tests/bdd/step-definitions/api-routes.steps.js:274
    - And count should be included # tests/bdd/step-definitions/api-routes.steps.js:279
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

43) Scenario: Enforce bid history limit # tests/bdd/features/api-routes.feature:95
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    ? When GET /api/auctions/123/bids?limit=200 is called
        Undefined. Implement with the following snippet:

          When('GET \\/api\\/auctions\\/{int}\\/bids?limit={int} is called', async function (int, int2) {
          // When('GET \\/api\\/auctions\\/{int}\\/bids?limit={float} is called', async function (int, float) {
          // When('GET \\/api\\/auctions\\/{float}\\/bids?limit={int} is called', async function (float, int) {
          // When('GET \\/api\\/auctions\\/{float}\\/bids?limit={float} is called', async function (float, float2) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then response should be 400 "Limit cannot exceed 100"
        Undefined. Implement with the following snippet:

          Then('response should be {int} {string}', async function (int, string) {
          // Then('response should be {float} {string}', async function (float, string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

44) Scenario: Validate bid amount # tests/bdd/features/api-routes.feature:100
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    ? When POST /api/auctions/123/bid with amount 0
        Undefined. Implement with the following snippet:

          When('POST \\/api\\/auctions\\/{int}\\/bid with amount {int}', async function (int, int2) {
          // When('POST \\/api\\/auctions\\/{int}\\/bid with amount {float}', async function (int, float) {
          // When('POST \\/api\\/auctions\\/{float}\\/bid with amount {int}', async function (float, int) {
          // When('POST \\/api\\/auctions\\/{float}\\/bid with amount {float}', async function (float, float2) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then response should be 400 "Invalid bid amount"
        Undefined. Implement with the following snippet:

          Then('response should be {int} {string}', async function (int, string) {
          // Then('response should be {float} {string}', async function (float, string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

45) Scenario: Set authentication cookies # tests/bdd/features/api-routes.feature:118
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    ? When POST /api/auth with cookies
        Undefined. Implement with the following snippet:

          When('POST \\/api\\/auth with cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â Then nellisApi.authenticate should be called
        Multiple step definitions match:
          nellisApi.authenticate should be called - tests/bdd/step-definitions/api-routes.steps.js:298       
          {word} should be called                 - tests/bdd/step-definitions/websocket-handler.steps.js:156
    - And success status should be returned # tests/bdd/step-definitions/api-routes.steps.js:302
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

46) Scenario: Log authentication requests # tests/bdd/features/api-routes.feature:123
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    ? When POST /api/auth is called
        Undefined. Implement with the following snippet:

          When('POST \\/api\\/auth is called', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - Then request body, headers, and content-type should be logged # tests/bdd/step-definitions/api-routes.steps.js:308
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

47) Scenario: Require cookies in auth request # tests/bdd/features/api-routes.feature:127
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    ? When POST /api/auth without cookies
        Undefined. Implement with the following snippet:

          When('POST \\/api\\/auth without cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then response should be 400 "Cookies required"
        Undefined. Implement with the following snippet:

          Then('response should be {int} {string}', async function (int, string) {
          // Then('response should be {float} {string}', async function (float, string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

48) Scenario: Validate authentication with auction fetch # tests/bdd/features/api-routes.feature:132
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    ? When POST /api/auth/validate is called
        Undefined. Implement with the following snippet:

          When('POST \\/api\\/auth\\/validate is called', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - Then test auction should be fetched # tests/bdd/step-definitions/api-routes.steps.js:313
    - And user state should be checked # tests/bdd/step-definitions/api-routes.steps.js:317
    - And authenticated status should be determined # tests/bdd/step-definitions/api-routes.steps.js:323
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

49) Scenario: Test bid placement during validation # tests/bdd/features/api-routes.feature:138
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â Given testBidAmount is provided # tests/bdd/step-definitions/api-routes.steps.js:177
    ? When POST /api/auth/validate is called
        Undefined. Implement with the following snippet:

          When('POST \\/api\\/auth\\/validate is called', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - Then safe bid amount should be used (below current) # tests/bdd/step-definitions/api-routes.steps.js:329
    - And bid test result should be included # tests/bdd/step-definitions/api-routes.steps.js:333
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

50) Scenario: Get current auth status # tests/bdd/features/api-routes.feature:145
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    ? When GET /api/auth/status is called
        Undefined. Implement with the following snippet:

          When('GET \\/api\\/auth\\/status is called', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - Then response should include authenticated boolean # tests/bdd/step-definitions/api-routes.steps.js:339
    - And cookieCount should be provided # tests/bdd/step-definitions/api-routes.steps.js:344
    - And appropriate message should be shown # tests/bdd/step-definitions/api-routes.steps.js:348
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

51) Scenario: Get comprehensive system status # tests/bdd/features/api-routes.feature:152
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    ? When GET /api/status is called
        Undefined. Implement with the following snippet:

          When('GET \\/api\\/status is called', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - Then response should include: # tests/bdd/step-definitions/api-routes.steps.js:382
        | Field             | Description                 |
        | monitoredAuctions | Count of monitored auctions |
        | uptime            | Process uptime              |
        | memory            | Memory usage statistics     |
        | storage.type      | "redis" or "memory"         |
        | storage.healthy   | Redis health check result   |
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

52) Scenario: Get global settings # tests/bdd/features/api-routes.feature:163
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    ? When GET /api/settings is called
        Undefined. Implement with the following snippet:

          When('GET \\/api\\/settings is called', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â Then storage.getSettings should be called
        Multiple step definitions match:
          storage.getSettings should be called - tests/bdd/step-definitions/api-routes.steps.js:352       
          {word} should be called              - tests/bdd/step-definitions/websocket-handler.steps.js:156
    - And current settings should be returned # tests/bdd/step-definitions/api-routes.steps.js:356
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

53) Scenario: Validate settings structure # tests/bdd/features/api-routes.feature:168
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    ? When POST /api/settings with invalid data
        Undefined. Implement with the following snippet:

          When('POST \\/api\\/settings with invalid data', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â Then validation should check:
        | Setting         | Validation                       |
        | defaultMaxBid   | Between 1 and 10000              |
        | defaultStrategy | Must be "increment" or "sniping" |
        | snipeTiming     | Between 1 and 30 seconds         |
        | bidBuffer       | Between 0 and 100                |
        | retryAttempts   | Between 1 and 10                 |
        Multiple step definitions match:
          validation should {word} - tests/bdd/step-definitions/api-routes.steps.js:198
          validation should check: - tests/bdd/step-definitions/api-routes.steps.js:394
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

54) Scenario: Save valid settings # tests/bdd/features/api-routes.feature:178
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    â Given settings pass validation # tests/bdd/step-definitions/api-routes.steps.js:167
    ? When POST /api/settings is called
        Undefined. Implement with the following snippet:

          When('POST \\/api\\/settings is called', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â Then storage.saveSettings should be called
        Multiple step definitions match:
          storage.saveSettings should be called - tests/bdd/step-definitions/api-routes.steps.js:360       
          {word} should be called               - tests/bdd/step-definitions/websocket-handler.steps.js:156
    - And updated settings should be returned # tests/bdd/step-definitions/api-routes.steps.js:364
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

55) Scenario: Log and return errors consistently # tests/bdd/features/api-routes.feature:185
    â Before # tests/bdd/support/hooks.js:29
    â Given the API server is running # tests/bdd/step-definitions/api-routes.steps.js:12
    â And required services are initialized # tests/bdd/step-definitions/api-routes.steps.js:19
    ? When any endpoint throws an error
        Undefined. Implement with the following snippet:

          When('any endpoint throws an error', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - Then error should be logged with context # tests/bdd/step-definitions/api-routes.steps.js:368
    - And 500 status should be returned # tests/bdd/step-definitions/api-routes.steps.js:373
    - And error message should be in response # tests/bdd/step-definitions/api-routes.steps.js:377
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

56) Scenario: Initialize services in correct order # tests/bdd/features/application-initialization.feature:9
    â Before # tests/bdd/support/hooks.js:29
    ? Given environment is configured
        Undefined. Implement with the following snippet:

          Given('environment is configured', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When the application starts
        Undefined. Implement with the following snippet:

          When('the application starts', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then services should initialize in this order:
        | Service        | Action                                      |
        | storage        | initialize() - establish Redis connection   |
        | nellisApi      | initialize() - recover cookies from storage |
        | auctionMonitor | initialize() - recover persisted auctions   |
        Undefined. Implement with the following snippet:

          Then('services should initialize in this order:', async function (dataTable) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And server should start listening only after all services ready
        Undefined. Implement with the following snippet:

          Then('server should start listening only after all services ready', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

57) Scenario: Handle missing Swagger dependencies gracefully # tests/bdd/features/application-initialization.feature:19
    â Before # tests/bdd/support/hooks.js:29
    ? Given environment is configured
        Undefined. Implement with the following snippet:

          Given('environment is configured', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Given swagger-ui-express is not installed
        Undefined. Implement with the following snippet:

          Given('swagger-ui-express is not installed', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When application starts
        Undefined. Implement with the following snippet:

          When('application starts', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then application should continue without Swagger UI
        Undefined. Implement with the following snippet:

          Then('application should continue without Swagger UI', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â And "Swagger dependencies not available" should be logged
        Multiple step definitions match:
          {string} should be logged - tests/bdd/step-definitions/nellis-api.steps.js:40        
          {string} should be logged - tests/bdd/step-definitions/websocket-handler.steps.js:105
          {string} should be logged - tests/bdd/step-definitions/websocket-handler.steps.js:441
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

58) Scenario: Allow specific origins # tests/bdd/features/application-initialization.feature:32
    â Before # tests/bdd/support/hooks.js:29
    ? Given environment is configured
        Undefined. Implement with the following snippet:

          Given('environment is configured', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When request comes from "chrome-extension://abcdef"
        Undefined. Implement with the following snippet:

          When('request comes from {string}', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then CORS should allow
        Undefined. Implement with the following snippet:

          Then('CORS should allow', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

59) Scenario: Allow specific origins # tests/bdd/features/application-initialization.feature:33
    â Before # tests/bdd/support/hooks.js:29
    ? Given environment is configured
        Undefined. Implement with the following snippet:

          Given('environment is configured', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When request comes from "http://localhost:3000"
        Undefined. Implement with the following snippet:

          When('request comes from {string}', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then CORS should allow
        Undefined. Implement with the following snippet:

          Then('CORS should allow', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

60) Scenario: Allow specific origins # tests/bdd/features/application-initialization.feature:34
    â Before # tests/bdd/support/hooks.js:29
    ? Given environment is configured
        Undefined. Implement with the following snippet:

          Given('environment is configured', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When request comes from "http://localhost:8080"
        Undefined. Implement with the following snippet:

          When('request comes from {string}', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then CORS should allow
        Undefined. Implement with the following snippet:

          Then('CORS should allow', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

61) Scenario: Allow specific origins # tests/bdd/features/application-initialization.feature:35
    â Before # tests/bdd/support/hooks.js:29
    ? Given environment is configured
        Undefined. Implement with the following snippet:

          Given('environment is configured', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When request comes from "https://example.com"
        Undefined. Implement with the following snippet:

          When('request comes from {string}', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then CORS should reject
        Undefined. Implement with the following snippet:

          Then('CORS should reject', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

62) Scenario: Allow specific origins # tests/bdd/features/application-initialization.feature:36
    â Before # tests/bdd/support/hooks.js:29
    ? Given environment is configured
        Undefined. Implement with the following snippet:

          Given('environment is configured', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When request comes from "null"
        Undefined. Implement with the following snippet:

          When('request comes from {string}', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then CORS should allow
        Undefined. Implement with the following snippet:

          Then('CORS should allow', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

63) Scenario: Configure Express middleware # tests/bdd/features/application-initialization.feature:39
    â Before # tests/bdd/support/hooks.js:29
    ? Given environment is configured
        Undefined. Implement with the following snippet:

          Given('environment is configured', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When server initializes
        Undefined. Implement with the following snippet:

          When('server initializes', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then these middleware should be applied in order:
        | Middleware         | Configuration               |
        | cors               | With custom origin function |
        | express.json       | For JSON parsing            |
        | express.urlencoded | With extended: true         |
        Undefined. Implement with the following snippet:

          Then('these middleware should be applied in order:', async function (dataTable) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

64) Scenario: Load Swagger documentation when available # tests/bdd/features/application-initialization.feature:48
    â Before # tests/bdd/support/hooks.js:29
    ? Given environment is configured
        Undefined. Implement with the following snippet:

          Given('environment is configured', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Given swagger.yaml exists
        Undefined. Implement with the following snippet:

          Given('swagger.yaml exists', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And Swagger dependencies are available
        Undefined. Implement with the following snippet:

          Given('Swagger dependencies are available', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When server starts
        Undefined. Implement with the following snippet:

          When('server starts', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then Swagger UI should be available at /api-docs
        Undefined. Implement with the following snippet:

          Then('Swagger UI should be available at \\/api-docs', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And custom configuration should be applied
        Undefined. Implement with the following snippet:

          Then('custom configuration should be applied', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

65) Scenario: Skip Swagger if YAML missing # tests/bdd/features/application-initialization.feature:55
    â Before # tests/bdd/support/hooks.js:29
    ? Given environment is configured
        Undefined. Implement with the following snippet:

          Given('environment is configured', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Given swagger.yaml does not exist
        Undefined. Implement with the following snippet:

          Given('swagger.yaml does not exist', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When server starts
        Undefined. Implement with the following snippet:

          When('server starts', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â Then "swagger.yaml not found" should be logged
        Multiple step definitions match:
          {string} should be logged - tests/bdd/step-definitions/nellis-api.steps.js:40        
          {string} should be logged - tests/bdd/step-definitions/websocket-handler.steps.js:105
          {string} should be logged - tests/bdd/step-definitions/websocket-handler.steps.js:441
    ? And server should continue normally
        Undefined. Implement with the following snippet:

          Then('server should continue normally', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

66) Scenario: Serve monitoring UI # tests/bdd/features/application-initialization.feature:62
    â Before # tests/bdd/support/hooks.js:29
    ? Given environment is configured
        Undefined. Implement with the following snippet:

          Given('environment is configured', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When server starts
        Undefined. Implement with the following snippet:

          When('server starts', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then public directory should be served as static files
        Undefined. Implement with the following snippet:

          Then('public directory should be served as static files', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And UI should be accessible at root path
        Undefined. Implement with the following snippet:

          Then('UI should be accessible at root path', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

67) Scenario: Provide health check endpoint # tests/bdd/features/application-initialization.feature:68
    â Before # tests/bdd/support/hooks.js:29
    ? Given environment is configured
        Undefined. Implement with the following snippet:

          Given('environment is configured', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When GET /health is called
        Undefined. Implement with the following snippet:

          When('GET \\/health is called', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - Then response should include: # tests/bdd/step-definitions/api-routes.steps.js:382
        | Field             | Value                     |
        | status            | "healthy"                 |
        | uptime            | Process uptime in seconds |
        | monitoredAuctions | Current count             |
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

68) Scenario: Initialize WebSocket with broadcast handler # tests/bdd/features/application-initialization.feature:77
    â Before # tests/bdd/support/hooks.js:29
    ? Given environment is configured
        Undefined. Implement with the following snippet:

          Given('environment is configured', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When auctionMonitor initializes
        Undefined. Implement with the following snippet:

          When('auctionMonitor initializes', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then custom broadcast handler should be provided
        Undefined. Implement with the following snippet:

          Then('custom broadcast handler should be provided', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And it should call wsHandler.broadcastAuctionState
        Undefined. Implement with the following snippet:

          Then('it should call wsHandler.broadcastAuctionState', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

69) Scenario: Use environment port or default # tests/bdd/features/application-initialization.feature:83
    â Before # tests/bdd/support/hooks.js:29
    ? Given environment is configured
        Undefined. Implement with the following snippet:

          Given('environment is configured', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Given PORT environment variable is "4000"
        Undefined. Implement with the following snippet:

          Given('PORT environment variable is {string}', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When server starts
        Undefined. Implement with the following snippet:

          When('server starts', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then server should listen on port 4000
        Undefined. Implement with the following snippet:

          Then('server should listen on port {int}', async function (int) {
          // Then('server should listen on port {float}', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

70) Scenario: Default to port 3000 # tests/bdd/features/application-initialization.feature:88
    â Before # tests/bdd/support/hooks.js:29
    ? Given environment is configured
        Undefined. Implement with the following snippet:

          Given('environment is configured', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Given PORT environment variable is not set
        Undefined. Implement with the following snippet:

          Given('PORT environment variable is not set', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When server starts
        Undefined. Implement with the following snippet:

          When('server starts', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then server should listen on port 3000
        Undefined. Implement with the following snippet:

          Then('server should listen on port {int}', async function (int) {
          // Then('server should listen on port {float}', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

71) Scenario: Set up Winston logger # tests/bdd/features/application-initialization.feature:94
    â Before # tests/bdd/support/hooks.js:29
    ? Given environment is configured
        Undefined. Implement with the following snippet:

          Given('environment is configured', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When logger initializes
        Undefined. Implement with the following snippet:

          When('logger initializes', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then these transports should be configured:
        | Transport | Configuration             |
        | File      | error.log for errors only |
        | File      | combined.log for all logs |
        | Console   | Simple format             |
        Undefined. Implement with the following snippet:

          Then('these transports should be configured:', async function (dataTable) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

72) Scenario: Log startup information # tests/bdd/features/application-initialization.feature:103
    â Before # tests/bdd/support/hooks.js:29
    ? Given environment is configured
        Undefined. Implement with the following snippet:

          Given('environment is configured', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When server starts successfully
        Undefined. Implement with the following snippet:

          When('server starts successfully', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then these should be logged:
        | Information   | Example                 |
        | Port          | "running on port 3000"  |
        | Redis status  | "Redis connected: true" |
        | Auction count | "Monitored auctions: 0" |
        Undefined. Implement with the following snippet:

          Then('these should be logged:', async function (dataTable) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

73) Scenario: Handle startup failures # tests/bdd/features/application-initialization.feature:112
    â Before # tests/bdd/support/hooks.js:29
    ? Given environment is configured
        Undefined. Implement with the following snippet:

          Given('environment is configured', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Given storage initialization fails
        Undefined. Implement with the following snippet:

          Given('storage initialization fails', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When server tries to start
        Undefined. Implement with the following snippet:

          When('server tries to start', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - Then error should be logged # tests/bdd/step-definitions/storage-service.steps.js:428
    ? And process should exit with code 1
        Undefined. Implement with the following snippet:

          Then('process should exit with code {int}', async function (int) {
          // Then('process should exit with code {float}', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

74) Scenario: Handle SIGTERM signal # tests/bdd/features/application-initialization.feature:119
    â Before # tests/bdd/support/hooks.js:29
    ? Given environment is configured
        Undefined. Implement with the following snippet:

          Given('environment is configured', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Given server is running
        Undefined. Implement with the following snippet:

          Given('server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When SIGTERM is received
        Undefined. Implement with the following snippet:

          When('SIGTERM is received', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then shutdown sequence should:
        | Step | Action                         |
        | 1    | Log "SIGTERM received"         |
        | 2    | Close HTTP server              |
        | 3    | Call auctionMonitor.shutdown() |
        | 4    | Close storage connection       |
        | 5    | Exit process with code 0       |
        Undefined. Implement with the following snippet:

          Then('shutdown sequence should:', async function (dataTable) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

75) Scenario: Export app and logger # tests/bdd/features/application-initialization.feature:131
    â Before # tests/bdd/support/hooks.js:29
    ? Given environment is configured
        Undefined. Implement with the following snippet:

          Given('environment is configured', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When module is required
        Undefined. Implement with the following snippet:

          When('module is required', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then exports should include:
        | Export | Type                    |
        | app    | Express application     |
        | logger | Winston logger instance |
        Undefined. Implement with the following snippet:

          Then('exports should include:', async function (dataTable) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

76) Scenario: Handle new WebSocket connections # tests/bdd/features/application-initialization.feature:139
    â Before # tests/bdd/support/hooks.js:29
    ? Given environment is configured
        Undefined. Implement with the following snippet:

          Given('environment is configured', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When WebSocket client connects
        Undefined. Implement with the following snippet:

          When('WebSocket client connects', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - Then wsHandler.handleConnection should be called # tests/bdd/step-definitions/websocket-handler.steps.js:156
    ? And it should receive WebSocket instance and server reference
        Undefined. Implement with the following snippet:

          Then('it should receive WebSocket instance and server reference', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

77) Scenario: Mount API routes # tests/bdd/features/application-initialization.feature:145
    â Before # tests/bdd/support/hooks.js:29
    ? Given environment is configured
        Undefined. Implement with the following snippet:

          Given('environment is configured', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When server initializes
        Undefined. Implement with the following snippet:

          When('server initializes', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then /api routes should be handled by apiRoutes module
        Undefined. Implement with the following snippet:

          Then('\\/api routes should be handled by apiRoutes module', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And all API endpoints should be prefixed with /api
        Undefined. Implement with the following snippet:

          Then('all API endpoints should be prefixed with \\/api', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

78) Scenario: Add new auction to monitoring # tests/bdd/features/auction-monitoring.feature:11
    â Before # tests/bdd/support/hooks.js:29
    ? Given the storage service is initialized
        Undefined. Implement with the following snippet:

          Given('the storage service is initialized', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the WebSocket server is running
        Undefined. Implement with the following snippet:

          Given('the WebSocket server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And I have valid authentication cookies
        Undefined. Implement with the following snippet:

          Given('I have valid authentication cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Given auction "12345" is not currently monitored
        Undefined. Implement with the following snippet:

          Given('auction {string} is not currently monitored', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When I add auction "12345" with default config
        Undefined. Implement with the following snippet:

          When('I add auction {string} with default config', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then auction "12345" should be added to monitoredAuctions Map
        Undefined. Implement with the following snippet:

          Then('auction {string} should be added to monitoredAuctions Map', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And auction should be persisted to storage
        Undefined. Implement with the following snippet:

          Then('auction should be persisted to storage', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And polling should start with 6 second interval
        Undefined. Implement with the following snippet:

          Then('polling should start with {int} second interval', async function (int) {
          // Then('polling should start with {float} second interval', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And initial update should be triggered immediately
        Undefined. Implement with the following snippet:

          Then('initial update should be triggered immediately', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

79) Scenario: Prevent duplicate auction monitoring # tests/bdd/features/auction-monitoring.feature:19
    â Before # tests/bdd/support/hooks.js:29
    ? Given the storage service is initialized
        Undefined. Implement with the following snippet:

          Given('the storage service is initialized', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the WebSocket server is running
        Undefined. Implement with the following snippet:

          Given('the WebSocket server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And I have valid authentication cookies
        Undefined. Implement with the following snippet:

          Given('I have valid authentication cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Given auction "12345" is already being monitored
        Undefined. Implement with the following snippet:

          Given('auction {string} is already being monitored', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When I attempt to add auction "12345" again
        Undefined. Implement with the following snippet:

          When('I attempt to add auction {string} again', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then the add operation should return false
        Undefined. Implement with the following snippet:

          Then('the add operation should return false', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And a warning should be logged "Auction 12345 is already being monitored"
        Undefined. Implement with the following snippet:

          Then('a warning should be logged {string}', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

80) Scenario: Apply global settings to new auctions # tests/bdd/features/auction-monitoring.feature:25
    â Before # tests/bdd/support/hooks.js:29
    ? Given the storage service is initialized
        Undefined. Implement with the following snippet:

          Given('the storage service is initialized', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the WebSocket server is running
        Undefined. Implement with the following snippet:

          Given('the WebSocket server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And I have valid authentication cookies
        Undefined. Implement with the following snippet:

          Given('I have valid authentication cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Given global settings have defaultMaxBid of 200
        Undefined. Implement with the following snippet:

          Given('global settings have defaultMaxBid of {int}', async function (int) {
          // Given('global settings have defaultMaxBid of {float}', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And global settings have defaultStrategy of "sniping"
        Undefined. Implement with the following snippet:

          Given('global settings have defaultStrategy of {string}', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When I add auction "12345" without specifying config
        Undefined. Implement with the following snippet:

          When('I add auction {string} without specifying config', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then auction should have maxBid of 200
        Undefined. Implement with the following snippet:

          Then('auction should have maxBid of {int}', async function (int) {
          // Then('auction should have maxBid of {float}', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And auction should have strategy of "sniping"
        Undefined. Implement with the following snippet:

          Then('auction should have strategy of {string}', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

81) Scenario: Recover persisted auctions on startup # tests/bdd/features/auction-monitoring.feature:33
    â Before # tests/bdd/support/hooks.js:29
    ? Given the storage service is initialized
        Undefined. Implement with the following snippet:

          Given('the storage service is initialized', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the WebSocket server is running
        Undefined. Implement with the following snippet:

          Given('the WebSocket server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And I have valid authentication cookies
        Undefined. Implement with the following snippet:

          Given('I have valid authentication cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Given storage contains 5 persisted auctions
        Undefined. Implement with the following snippet:

          Given('storage contains {int} persisted auctions', async function (int) {
          // Given('storage contains {float} persisted auctions', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And 3 auctions have status "monitoring"
        Undefined. Implement with the following snippet:

          Given('{int} auctions have status {string}', async function (int, string) {
          // Given('{float} auctions have status {string}', async function (float, string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And 2 auctions have status "ended"
        Undefined. Implement with the following snippet:

          Given('{int} auctions have status {string}', async function (int, string) {
          // Given('{float} auctions have status {string}', async function (float, string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When the auction monitor initializes
        Undefined. Implement with the following snippet:

          When('the auction monitor initializes', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then only the 3 "monitoring" auctions should be recovered
        Undefined. Implement with the following snippet:

          Then('only the {int} {string} auctions should be recovered', async function (int, string) {
          // Then('only the {float} {string} auctions should be recovered', async function (float, string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And polling should restart for recovered auctions
        Undefined. Implement with the following snippet:

          Then('polling should restart for recovered auctions', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And ended auctions should not start polling
        Undefined. Implement with the following snippet:

          Then('ended auctions should not start polling', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

82) Scenario: Adaptive polling near auction end # tests/bdd/features/auction-monitoring.feature:43
    â Before # tests/bdd/support/hooks.js:29
    ? Given the storage service is initialized
        Undefined. Implement with the following snippet:

          Given('the storage service is initialized', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the WebSocket server is running
        Undefined. Implement with the following snippet:

          Given('the WebSocket server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And I have valid authentication cookies
        Undefined. Implement with the following snippet:

          Given('I have valid authentication cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â Given auction "12345" is being monitored
        Multiple step definitions match:
          auction {string} is being monitored - tests/bdd/step-definitions/api-routes.steps.js:155       
          auction {string} is being monitored - tests/bdd/step-definitions/websocket-handler.steps.js:274
    â And auction has 25 seconds remaining
        Multiple step definitions match:
          auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:127
          auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:423
          auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:595
    ? When the monitor checks time remaining
        Undefined. Implement with the following snippet:

          When('the monitor checks time remaining', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then polling interval should change to 2 seconds
        Undefined. Implement with the following snippet:

          Then('polling interval should change to {int} seconds', async function (int) {
          // Then('polling interval should change to {float} seconds', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the adjustPollingRate method should be called
        Undefined. Implement with the following snippet:

          Then('the adjustPollingRate method should be called', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

83) Scenario: Clear existing interval when adjusting polling rate # tests/bdd/features/auction-monitoring.feature:50
    â Before # tests/bdd/support/hooks.js:29
    ? Given the storage service is initialized
        Undefined. Implement with the following snippet:

          Given('the storage service is initialized', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the WebSocket server is running
        Undefined. Implement with the following snippet:

          Given('the WebSocket server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And I have valid authentication cookies
        Undefined. Implement with the following snippet:

          Given('I have valid authentication cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Given auction "12345" has polling interval of 6 seconds
        Undefined. Implement with the following snippet:

          Given('auction {string} has polling interval of {int} seconds', async function (string, int) {
          // Given('auction {string} has polling interval of {float} seconds', async function (string, float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When polling rate is adjusted to 2 seconds
        Undefined. Implement with the following snippet:

          When('polling rate is adjusted to {int} seconds', async function (int) {
          // When('polling rate is adjusted to {float} seconds', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then the old interval should be cleared first
        Undefined. Implement with the following snippet:

          Then('the old interval should be cleared first', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And new interval should be set
        Undefined. Implement with the following snippet:

          Then('new interval should be set', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

84) Scenario: Handle auction ending during update # tests/bdd/features/auction-monitoring.feature:57
    â Before # tests/bdd/support/hooks.js:29
    ? Given the storage service is initialized
        Undefined. Implement with the following snippet:

          Given('the storage service is initialized', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the WebSocket server is running
        Undefined. Implement with the following snippet:

          Given('the WebSocket server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And I have valid authentication cookies
        Undefined. Implement with the following snippet:

          Given('I have valid authentication cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â Given auction "12345" is being monitored
        Multiple step definitions match:
          auction {string} is being monitored - tests/bdd/step-definitions/api-routes.steps.js:155       
          auction {string} is being monitored - tests/bdd/step-definitions/websocket-handler.steps.js:274
    ? When update shows isClosed is true
        Undefined. Implement with the following snippet:

          When('update shows isClosed is true', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then auction status should change to "ended"
        Undefined. Implement with the following snippet:

          Then('auction status should change to {string}', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - And handleAuctionEnd should be called # tests/bdd/step-definitions/websocket-handler.steps.js:156
    ? And polling should stop
        Undefined. Implement with the following snippet:

          Then('polling should stop', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

85) Scenario: Detect bid changes during update # tests/bdd/features/auction-monitoring.feature:64
    â Before # tests/bdd/support/hooks.js:29
    ? Given the storage service is initialized
        Undefined. Implement with the following snippet:

          Given('the storage service is initialized', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the WebSocket server is running
        Undefined. Implement with the following snippet:

          Given('the WebSocket server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And I have valid authentication cookies
        Undefined. Implement with the following snippet:

          Given('I have valid authentication cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Given auction "12345" has currentBid of $50
        Undefined. Implement with the following snippet:

          Given('auction {string} has currentBid of ${int}', async function (string, int) {
          // Given('auction {string} has currentBid of ${float}', async function (string, float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When update shows currentBid of $75
        Undefined. Implement with the following snippet:

          When('update shows currentBid of ${int}', async function (int) {
          // When('update shows currentBid of ${float}', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - Then handleBidUpdate should be called # tests/bdd/step-definitions/websocket-handler.steps.js:156
    ? And previous and new bid data should be passed
        Undefined. Implement with the following snippet:

          Then('previous and new bid data should be passed', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

86) Scenario: Persist auction state after each update # tests/bdd/features/auction-monitoring.feature:70
    â Before # tests/bdd/support/hooks.js:29
    ? Given the storage service is initialized
        Undefined. Implement with the following snippet:

          Given('the storage service is initialized', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the WebSocket server is running
        Undefined. Implement with the following snippet:

          Given('the WebSocket server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And I have valid authentication cookies
        Undefined. Implement with the following snippet:

          Given('I have valid authentication cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â Given auction "12345" is being monitored
        Multiple step definitions match:
          auction {string} is being monitored - tests/bdd/step-definitions/api-routes.steps.js:155       
          auction {string} is being monitored - tests/bdd/step-definitions/websocket-handler.steps.js:274
    ? When any update is processed
        Undefined. Implement with the following snippet:

          When('any update is processed', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then updated auction data should be saved to storage
        Undefined. Implement with the following snippet:

          Then('updated auction data should be saved to storage', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And lastUpdate timestamp should be updated
        Undefined. Implement with the following snippet:

          Then('lastUpdate timestamp should be updated', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

87) Scenario: Skip auto-bid when already winning # tests/bdd/features/auction-monitoring.feature:77
    â Before # tests/bdd/support/hooks.js:29
    ? Given the storage service is initialized
        Undefined. Implement with the following snippet:

          Given('the storage service is initialized', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the WebSocket server is running
        Undefined. Implement with the following snippet:

          Given('the WebSocket server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And I have valid authentication cookies
        Undefined. Implement with the following snippet:

          Given('I have valid authentication cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Given auction "12345" shows user is winning
        Undefined. Implement with the following snippet:

          Given('auction {string} shows user is winning', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And auto-bid is enabled
        Undefined. Implement with the following snippet:

          Given('auto-bid is enabled', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When executeAutoBid is called
        Undefined. Implement with the following snippet:

          When('executeAutoBid is called', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then no bid should be placed
        Undefined. Implement with the following snippet:

          Then('no bid should be placed', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And function should return early
        Undefined. Implement with the following snippet:

          Then('function should return early', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

88) Scenario: Execute incremental strategy auto-bid # tests/bdd/features/auction-monitoring.feature:84
    â Before # tests/bdd/support/hooks.js:29
    ? Given the storage service is initialized
        Undefined. Implement with the following snippet:

          Given('the storage service is initialized', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the WebSocket server is running
        Undefined. Implement with the following snippet:

          Given('the WebSocket server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And I have valid authentication cookies
        Undefined. Implement with the following snippet:

          Given('I have valid authentication cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Given auction config has strategy "increment"
        Undefined. Implement with the following snippet:

          Given('auction config has strategy {string}', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And user is not winning
        Undefined. Implement with the following snippet:

          Given('user is not winning', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And currentBid is $50 with nextBid of $55
        Undefined. Implement with the following snippet:

          Given('currentBid is ${int} with nextBid of ${int}', async function (int, int2) {
          // Given('currentBid is ${int} with nextBid of ${float}', async function (int, float) {
          // Given('currentBid is ${float} with nextBid of ${int}', async function (float, int) {
          // Given('currentBid is ${float} with nextBid of ${float}', async function (float, float2) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And maxBid is set to $100
        Undefined. Implement with the following snippet:

          Given('maxBid is set to ${int}', async function (int) {
          // Given('maxBid is set to ${float}', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When executeAutoBid is triggered
        Undefined. Implement with the following snippet:

          When('executeAutoBid is triggered', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then bid should be placed for $55 plus bidBuffer
        Undefined. Implement with the following snippet:

          Then('bid should be placed for ${int} plus bidBuffer', async function (int) {
          // Then('bid should be placed for ${float} plus bidBuffer', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

89) Scenario: Execute sniping strategy with timing check # tests/bdd/features/auction-monitoring.feature:92
    â Before # tests/bdd/support/hooks.js:29
    ? Given the storage service is initialized
        Undefined. Implement with the following snippet:

          Given('the storage service is initialized', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the WebSocket server is running
        Undefined. Implement with the following snippet:

          Given('the WebSocket server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And I have valid authentication cookies
        Undefined. Implement with the following snippet:

          Given('I have valid authentication cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Given auction config has strategy "sniping"
        Undefined. Implement with the following snippet:

          Given('auction config has strategy {string}', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And global snipeTiming is 5 seconds
        Undefined. Implement with the following snippet:

          Given('global snipeTiming is {int} seconds', async function (int) {
          // Given('global snipeTiming is {float} seconds', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â And auction has 10 seconds remaining
        Multiple step definitions match:
          auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:127
          auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:423
          auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:595
    ? When executeAutoBid is triggered
        Undefined. Implement with the following snippet:

          When('executeAutoBid is triggered', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - Then no bid should be placed yet # tests/bdd/step-definitions/integration-flows.steps.js:428
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

90) Scenario: Execute sniping bid at correct time # tests/bdd/features/auction-monitoring.feature:99
    â Before # tests/bdd/support/hooks.js:29
    ? Given the storage service is initialized
        Undefined. Implement with the following snippet:

          Given('the storage service is initialized', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the WebSocket server is running
        Undefined. Implement with the following snippet:

          Given('the WebSocket server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And I have valid authentication cookies
        Undefined. Implement with the following snippet:

          Given('I have valid authentication cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Given auction config has strategy "sniping"
        Undefined. Implement with the following snippet:

          Given('auction config has strategy {string}', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And global snipeTiming is 5 seconds
        Undefined. Implement with the following snippet:

          Given('global snipeTiming is {int} seconds', async function (int) {
          // Given('global snipeTiming is {float} seconds', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â And auction has 4 seconds remaining
        Multiple step definitions match:
          auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:127
          auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:423
          auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:595
    ? When executeAutoBid is triggered
        Undefined. Implement with the following snippet:

          When('executeAutoBid is triggered', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then bid should be placed immediately
        Undefined. Implement with the following snippet:

          Then('bid should be placed immediately', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

91) Scenario: Handle maximum bid reached # tests/bdd/features/auction-monitoring.feature:106
    â Before # tests/bdd/support/hooks.js:29
    ? Given the storage service is initialized
        Undefined. Implement with the following snippet:

          Given('the storage service is initialized', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the WebSocket server is running
        Undefined. Implement with the following snippet:

          Given('the WebSocket server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And I have valid authentication cookies
        Undefined. Implement with the following snippet:

          Given('I have valid authentication cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Given maxBid is $100
        Undefined. Implement with the following snippet:

          Given('maxBid is ${int}', async function (int) {
          // Given('maxBid is ${float}', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And nextBid would be $105
        Undefined. Implement with the following snippet:

          Given('nextBid would be ${int}', async function (int) {
          // Given('nextBid would be ${float}', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When executeAutoBid is triggered
        Undefined. Implement with the following snippet:

          When('executeAutoBid is triggered', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then no bid should be placed
        Undefined. Implement with the following snippet:

          Then('no bid should be placed', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And maxBidReached flag should be set to true
        Undefined. Implement with the following snippet:

          Then('maxBidReached flag should be set to true', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And warning should be logged
        Undefined. Implement with the following snippet:

          Then('warning should be logged', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

92) Scenario: Handle successful bid with immediate outbid # tests/bdd/features/auction-monitoring.feature:115
    â Before # tests/bdd/support/hooks.js:29
    ? Given the storage service is initialized
        Undefined. Implement with the following snippet:

          Given('the storage service is initialized', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the WebSocket server is running
        Undefined. Implement with the following snippet:

          Given('the WebSocket server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And I have valid authentication cookies
        Undefined. Implement with the following snippet:

          Given('I have valid authentication cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Given a bid is placed successfully
        Undefined. Implement with the following snippet:

          Given('a bid is placed successfully', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When response indicates "another user has a higher maximum bid"
        Undefined. Implement with the following snippet:

          When('response indicates {string}', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then auction data should be updated with new values
        Undefined. Implement with the following snippet:

          Then('auction data should be updated with new values', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And for increment strategy, retry bid after 2 seconds
        Undefined. Implement with the following snippet:

          Then('for increment strategy, retry bid after {int} seconds', async function (int) {
          // Then('for increment strategy, retry bid after {float} seconds', async function (float) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And bid history should record the attempt
        Undefined. Implement with the following snippet:

          Then('bid history should record the attempt', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

93) Scenario: Save bid history for all attempts # tests/bdd/features/auction-monitoring.feature:122
    â Before # tests/bdd/support/hooks.js:29
    ? Given the storage service is initialized
        Undefined. Implement with the following snippet:

          Given('the storage service is initialized', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the WebSocket server is running
        Undefined. Implement with the following snippet:

          Given('the WebSocket server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And I have valid authentication cookies
        Undefined. Implement with the following snippet:

          Given('I have valid authentication cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Given any bid attempt is made
        Undefined. Implement with the following snippet:

          Given('any bid attempt is made', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When bid succeeds or fails
        Undefined. Implement with the following snippet:

          When('bid succeeds or fails', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then bid details should be saved to storage
        Undefined. Implement with the following snippet:

          Then('bid details should be saved to storage', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And it should include amount, strategy, success status, and timestamp
        Undefined. Implement with the following snippet:

          Then('it should include amount, strategy, success status, and timestamp', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

94) Scenario: Broadcast auction state after updates # tests/bdd/features/auction-monitoring.feature:129
    â Before # tests/bdd/support/hooks.js:29
    ? Given the storage service is initialized
        Undefined. Implement with the following snippet:

          Given('the storage service is initialized', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the WebSocket server is running
        Undefined. Implement with the following snippet:

          Given('the WebSocket server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And I have valid authentication cookies
        Undefined. Implement with the following snippet:

          Given('I have valid authentication cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Given WebSocket clients are connected
        Undefined. Implement with the following snippet:

          Given('WebSocket clients are connected', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When auction state changes
        Undefined. Implement with the following snippet:

          When('auction state changes', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - Then broadcastAuctionState should be called # tests/bdd/step-definitions/websocket-handler.steps.js:156
    ? And all authenticated clients should receive update
        Undefined. Implement with the following snippet:

          Then('all authenticated clients should receive update', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

95) Scenario: Emit events for auction lifecycle # tests/bdd/features/auction-monitoring.feature:135
    â Before # tests/bdd/support/hooks.js:29
    ? Given the storage service is initialized
        Undefined. Implement with the following snippet:

          Given('the storage service is initialized', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the WebSocket server is running
        Undefined. Implement with the following snippet:

          Given('the WebSocket server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And I have valid authentication cookies
        Undefined. Implement with the following snippet:

          Given('I have valid authentication cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â Given auction "12345" is being monitored
        Multiple step definitions match:
          auction {string} is being monitored - tests/bdd/step-definitions/api-routes.steps.js:155       
          auction {string} is being monitored - tests/bdd/step-definitions/websocket-handler.steps.js:274
    - When auction ends # tests/bdd/step-definitions/integration-flows.steps.js:138
    - Then "auctionEnded" event should be emitted # tests/bdd/step-definitions/storage-service.steps.js:43
    ? And it should include auctionId, finalPrice, and won status
        Undefined. Implement with the following snippet:

          Then('it should include auctionId, finalPrice, and won status', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

96) Scenario: Handle API errors during update # tests/bdd/features/auction-monitoring.feature:142
    â Before # tests/bdd/support/hooks.js:29
    ? Given the storage service is initialized
        Undefined. Implement with the following snippet:

          Given('the storage service is initialized', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the WebSocket server is running
        Undefined. Implement with the following snippet:

          Given('the WebSocket server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And I have valid authentication cookies
        Undefined. Implement with the following snippet:

          Given('I have valid authentication cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â Given auction "12345" is being monitored
        Multiple step definitions match:
          auction {string} is being monitored - tests/bdd/step-definitions/api-routes.steps.js:155       
          auction {string} is being monitored - tests/bdd/step-definitions/websocket-handler.steps.js:274
    ? When nellisApi.getAuctionData throws error
        Undefined. Implement with the following snippet:

          When('nellisApi.getAuctionData throws error', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then auction status should change to "error"
        Undefined. Implement with the following snippet:

          Then('auction status should change to {string}', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - And error should be logged # tests/bdd/step-definitions/storage-service.steps.js:428
    ? And auction should be persisted with error status
        Undefined. Implement with the following snippet:

          Then('auction should be persisted with error status', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

97) Scenario: Remove ended auctions after delay # tests/bdd/features/auction-monitoring.feature:150
    â Before # tests/bdd/support/hooks.js:29
    ? Given the storage service is initialized
        Undefined. Implement with the following snippet:

          Given('the storage service is initialized', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the WebSocket server is running
        Undefined. Implement with the following snippet:

          Given('the WebSocket server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And I have valid authentication cookies
        Undefined. Implement with the following snippet:

          Given('I have valid authentication cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Given auction "12345" has ended
        Undefined. Implement with the following snippet:

          Given('auction {string} has ended', async function (string) {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When handleAuctionEnd is called
        Undefined. Implement with the following snippet:

          When('handleAuctionEnd is called', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - Then auction should remain in memory for 60 seconds # tests/bdd/step-definitions/integration-flows.steps.js:148
    ? And then be automatically removed
        Undefined. Implement with the following snippet:

          Then('then be automatically removed', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

98) Scenario: Complete shutdown sequence # tests/bdd/features/auction-monitoring.feature:156
    â Before # tests/bdd/support/hooks.js:29
    ? Given the storage service is initialized
        Undefined. Implement with the following snippet:

          Given('the storage service is initialized', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the WebSocket server is running
        Undefined. Implement with the following snippet:

          Given('the WebSocket server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And I have valid authentication cookies
        Undefined. Implement with the following snippet:

          Given('I have valid authentication cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? When shutdown is called
        Undefined. Implement with the following snippet:

          When('shutdown is called', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? Then all polling intervals should be cleared
        Undefined. Implement with the following snippet:

          Then('all polling intervals should be cleared', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And pollingIntervals Map should be empty
        Undefined. Implement with the following snippet:

          Then('pollingIntervals Map should be empty', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And monitoredAuctions Map should be empty
        Undefined. Implement with the following snippet:

          Then('monitoredAuctions Map should be empty', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

99) Scenario: Update auction configuration # tests/bdd/features/auction-monitoring.feature:163
    â Before # tests/bdd/support/hooks.js:29
    ? Given the storage service is initialized
        Undefined. Implement with the following snippet:

          Given('the storage service is initialized', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And the WebSocket server is running
        Undefined. Implement with the following snippet:

          Given('the WebSocket server is running', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    ? And I have valid authentication cookies
        Undefined. Implement with the following snippet:

          Given('I have valid authentication cookies', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    â Given auction "12345" is being monitored
        Multiple step definitions match:
          auction {string} is being monitored - tests/bdd/step-definitions/api-routes.steps.js:155       
          auction {string} is being monitored - tests/bdd/step-definitions/websocket-handler.steps.js:274
    ? When config is updated with new maxBid
        Undefined. Implement with the following snippet:

          When('config is updated with new maxBid', async function () {
            // Write code here that turns the phrase above into concrete actions
            return 'pending';
          });

    - Then config should be merged with existing # tests/bdd/step-definitions/api-routes.steps.js:266
    - And changes should be persisted to storage # tests/bdd/step-definitions/integration-flows.steps.js:87
    - And auction state should be broadcast # tests/bdd/step-definitions/websocket-handler.steps.js:295
    â After # tests/bdd/support/hooks.js:103
    â After # tests/bdd/support/hooks.js:42
    â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
    â After # tests/bdd/step-definitions/storage-service.steps.js:459
    â After # tests/bdd/step-definitions/nellis-api.steps.js:400
    â After # tests/bdd/step-definitions/integration-flows.steps.js:673
    â After # tests/bdd/step-definitions/api-routes.steps.js:482

100) Scenario: Successfully start monitoring an auction via WebSocket # tests/bdd/features/auction-monitoring/start-monitoring.feature:11
     â Before # tests/bdd/support/hooks.js:29
     â Before # tests/bdd/support/hooks.js:62
     â Before # tests/bdd/support/hooks.js:83
         Error: Cannot find module '../../src/services/nellisApi'
         Require stack:
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/support/hooks.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/try_require.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/support.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/load_support.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/index.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/cli/index.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/cli/run.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/bin/cucumber.js
             at Function._resolveFilename (node:internal/modules/cjs/loader:1405:15)
             at defaultResolveImpl (node:internal/modules/cjs/loader:1061:19)
             at resolveForCJSWithHooks (node:internal/modules/cjs/loader:1066:22)
             at Function._load (node:internal/modules/cjs/loader:1215:37)
             at TracingChannel.traceSync (node:diagnostics_channel:322:14)
             at wrapModuleLoad (node:internal/modules/cjs/loader:235:24)
             at Module.require (node:internal/modules/cjs/loader:1491:12)
             at require (node:internal/modules/helpers:135:16)
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/support/hooks.js:85:21)
     - Given I am authenticated with a valid token # tests/bdd/step-definitions/auction-monitoring.steps.js:11
     - And the external auction API is available # tests/bdd/step-definitions/auction-monitoring.steps.js:16
     - Given I have a WebSocket connection # tests/bdd/step-definitions/auction-monitoring.steps.js:21
     - When I send a startMonitoring message for auction "12345" with config: # tests/bdd/step-definitions/auction-monitoring.steps.js:64
         | maxBid   | 100       |
         | strategy | increment |
         | autoBid  | true      |
     - Then I should receive a "monitoringStarted" message # tests/bdd/step-definitions/auction-monitoring.steps.js:116
     - And the auction "12345" should be in the monitored list # tests/bdd/step-definitions/auction-monitoring.steps.js:127
     - And the auction should have the correct configuration # tests/bdd/step-definitions/auction-monitoring.steps.js:136
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:67
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

101) Scenario: Successfully start monitoring an auction via REST API # tests/bdd/features/auction-monitoring/start-monitoring.feature:22
     â Before # tests/bdd/support/hooks.js:29
     â Before # tests/bdd/support/hooks.js:83
         Error: Cannot find module '../../src/services/nellisApi'
         Require stack:
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/support/hooks.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/try_require.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/support.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/load_support.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/index.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/cli/index.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/cli/run.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/bin/cucumber.js
             at Function._resolveFilename (node:internal/modules/cjs/loader:1405:15)
             at defaultResolveImpl (node:internal/modules/cjs/loader:1061:19)
             at resolveForCJSWithHooks (node:internal/modules/cjs/loader:1066:22)
             at Function._load (node:internal/modules/cjs/loader:1215:37)
             at TracingChannel.traceSync (node:diagnostics_channel:322:14)
             at wrapModuleLoad (node:internal/modules/cjs/loader:235:24)
             at Module.require (node:internal/modules/cjs/loader:1491:12)
             at require (node:internal/modules/helpers:135:16)
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/support/hooks.js:85:21)
     - Given I am authenticated with a valid token # tests/bdd/step-definitions/auction-monitoring.steps.js:11
     - And the external auction API is available # tests/bdd/step-definitions/auction-monitoring.steps.js:16
     â When I make a POST request to "/api/auctions/12345/monitor" with body:
         """
         {
           "maxBid": 150,
           "strategy": "aggressive",
           "autoBid": false
         }
         """
         Multiple step definitions match:
           I make a POST request to {string} with body: - tests/bdd/step-definitions/api-routes.steps.js:33        
           I make a POST request to {string} with body: - tests/bdd/step-definitions/auction-monitoring.steps.js:83
     â Then the response status should be 200
         Multiple step definitions match:
           the response status should be {int} - tests/bdd/step-definitions/api-routes.steps.js:95         
           the response status should be {int} - tests/bdd/step-definitions/auction-monitoring.steps.js:146
     - And the response should contain: # tests/bdd/step-definitions/auction-monitoring.steps.js:150
         | success | true |
     - And the auction "12345" should be in the monitored list # tests/bdd/step-definitions/auction-monitoring.steps.js:127
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

102) Scenario: Cannot monitor the same auction twice # tests/bdd/features/auction-monitoring/start-monitoring.feature:37
     â Before # tests/bdd/support/hooks.js:29
     â Before # tests/bdd/support/hooks.js:62
     â Before # tests/bdd/support/hooks.js:83
         Error: Cannot find module '../../src/services/nellisApi'
         Require stack:
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/support/hooks.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/try_require.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/support.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/load_support.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/index.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/cli/index.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/cli/run.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/bin/cucumber.js
             at Function._resolveFilename (node:internal/modules/cjs/loader:1405:15)
             at defaultResolveImpl (node:internal/modules/cjs/loader:1061:19)
             at resolveForCJSWithHooks (node:internal/modules/cjs/loader:1066:22)
             at Function._load (node:internal/modules/cjs/loader:1215:37)
             at TracingChannel.traceSync (node:diagnostics_channel:322:14)
             at wrapModuleLoad (node:internal/modules/cjs/loader:235:24)
             at Module.require (node:internal/modules/cjs/loader:1491:12)
             at require (node:internal/modules/helpers:135:16)
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/support/hooks.js:85:21)
     - Given I am authenticated with a valid token # tests/bdd/step-definitions/auction-monitoring.steps.js:11
     - And the external auction API is available # tests/bdd/step-definitions/auction-monitoring.steps.js:16
     - Given I am already monitoring auction "12345" # tests/bdd/step-definitions/auction-monitoring.steps.js:27
     - When I send a startMonitoring message for auction "12345" with config: # tests/bdd/step-definitions/auction-monitoring.steps.js:64
         | maxBid   | 200     |
         | strategy | sniping |
     - Then I should receive an error message "ALREADY_MONITORING" # tests/bdd/step-definitions/auction-monitoring.steps.js:121
     - And the auction "12345" should still have its original configuration # tests/bdd/step-definitions/auction-monitoring.steps.js:165
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:67
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

103) Scenario: Reject invalid auction configuration # tests/bdd/features/auction-monitoring/start-monitoring.feature:46
     â Before # tests/bdd/support/hooks.js:29
     â Given I am authenticated with a valid token # tests/bdd/step-definitions/auction-monitoring.steps.js:11
         AssertionError: expected undefined to exist
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/auction-monitoring.steps.js:13:28)
     - And the external auction API is available # tests/bdd/step-definitions/auction-monitoring.steps.js:16
     â When I make a POST request to "/api/auctions/12345/monitor" with body:
         """
         {
           "maxBid": -50,
           "strategy": "invalid-strategy",
           "autoBid": "not-a-boolean"
         }
         """
         Multiple step definitions match:
           I make a POST request to {string} with body: - tests/bdd/step-definitions/api-routes.steps.js:33        
           I make a POST request to {string} with body: - tests/bdd/step-definitions/auction-monitoring.steps.js:83
     â Then the response status should be 400
         Multiple step definitions match:
           the response status should be {int} - tests/bdd/step-definitions/api-routes.steps.js:95         
           the response status should be {int} - tests/bdd/step-definitions/auction-monitoring.steps.js:146
     - And the response should contain validation errors for: # tests/bdd/step-definitions/auction-monitoring.steps.js:175
         | field    | error                                                   |
         | maxBid   | must be a positive number                               |
         | strategy | must be one of [manual, increment, aggressive, sniping] |
         | autoBid  | must be a boolean                                       |
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

104) Scenario: Monitoring state persists in Redis # tests/bdd/features/auction-monitoring/start-monitoring.feature:63
     â Before # tests/bdd/support/hooks.js:29
     â Before # tests/bdd/support/hooks.js:62
     â Before # tests/bdd/support/hooks.js:76
         ReferenceError: testRedis is not defined
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/support/hooks.js:78:3)
     - Given I am authenticated with a valid token # tests/bdd/step-definitions/auction-monitoring.steps.js:11
     - And the external auction API is available # tests/bdd/step-definitions/auction-monitoring.steps.js:16
     - When I send a startMonitoring message for auction "12345" with config: # tests/bdd/step-definitions/auction-monitoring.steps.js:64
         | maxBid   | 100       |
         | strategy | increment |
     - Then the auction "12345" should be saved in Redis # tests/bdd/step-definitions/auction-monitoring.steps.js:188
     - And the Redis data should include: # tests/bdd/step-definitions/auction-monitoring.steps.js:194
         | id       | 12345     |
         | maxBid   | 100       |
         | strategy | increment |
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:67
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

105) Scenario: Require authentication to start monitoring # tests/bdd/features/auction-monitoring/start-monitoring.feature:74
     â Before # tests/bdd/support/hooks.js:29
     â Given I am authenticated with a valid token # tests/bdd/step-definitions/auction-monitoring.steps.js:11
         AssertionError: expected undefined to exist
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/auction-monitoring.steps.js:13:28)
     - And the external auction API is available # tests/bdd/step-definitions/auction-monitoring.steps.js:16
     - Given I am not authenticated # tests/bdd/step-definitions/auction-monitoring.steps.js:45
     - When I make a POST request to "/api/auctions/12345/monitor" without auth token # tests/bdd/step-definitions/auction-monitoring.steps.js:90
     â Then the response status should be 401
         Multiple step definitions match:
           the response status should be {int} - tests/bdd/step-definitions/api-routes.steps.js:95         
           the response status should be {int} - tests/bdd/step-definitions/auction-monitoring.steps.js:146
     - And the response should contain: # tests/bdd/step-definitions/auction-monitoring.steps.js:150
         | error | Unauthorized |
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

106) Scenario: Rate limiting prevents monitoring spam # tests/bdd/features/auction-monitoring/start-monitoring.feature:82
     â Before # tests/bdd/support/hooks.js:29
     â Given I am authenticated with a valid token # tests/bdd/step-definitions/auction-monitoring.steps.js:11
         AssertionError: expected undefined to exist
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/auction-monitoring.steps.js:13:28)
     - And the external auction API is available # tests/bdd/step-definitions/auction-monitoring.steps.js:16
     - Given I have already monitored 10 auctions in the last minute # tests/bdd/step-definitions/auction-monitoring.steps.js:49
     - When I try to monitor another auction "99999" # tests/bdd/step-definitions/auction-monitoring.steps.js:104
     â Then the response status should be 429
         Multiple step definitions match:
           the response status should be {int} - tests/bdd/step-definitions/api-routes.steps.js:95         
           the response status should be {int} - tests/bdd/step-definitions/auction-monitoring.steps.js:146
     - And the response should contain: # tests/bdd/step-definitions/auction-monitoring.steps.js:150
         | error | Too many requests |
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

107) Scenario: Increment strategy places bid when outbid # tests/bdd/features/bidding-strategies/auto-bidding.feature:11
     â Before # tests/bdd/support/hooks.js:29
     â Before # tests/bdd/support/hooks.js:83
         Error: Cannot find module '../../src/services/nellisApi'
         Require stack:
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/support/hooks.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/try_require.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/support.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/load_support.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/index.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/cli/index.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/cli/run.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/bin/cucumber.js
             at Function._resolveFilename (node:internal/modules/cjs/loader:1405:15)
             at defaultResolveImpl (node:internal/modules/cjs/loader:1061:19)
             at resolveForCJSWithHooks (node:internal/modules/cjs/loader:1066:22)
             at Function._load (node:internal/modules/cjs/loader:1215:37)
             at TracingChannel.traceSync (node:diagnostics_channel:322:14)
             at wrapModuleLoad (node:internal/modules/cjs/loader:235:24)
             at Module.require (node:internal/modules/cjs/loader:1491:12)
             at require (node:internal/modules/helpers:135:16)
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/support/hooks.js:85:21)
     - Given I am authenticated with a valid token # tests/bdd/step-definitions/auction-monitoring.steps.js:11
     - And the external auction API is available # tests/bdd/step-definitions/auction-monitoring.steps.js:16
     ? Given I am monitoring auction "12345" with config:
         | maxBid   | 100       |
         | strategy | increment |
         | autoBid  | true      |
         Undefined. Implement with the following snippet:

           Given('I am monitoring auction {string} with config:', async function (string, dataTable) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When the auction data updates with:
         | currentBid | 50    |
         | isWinning  | false |
         | nextBid    | 55    |
         Undefined. Implement with the following snippet:

           When('the auction data updates with:', async function (dataTable) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then a bid should be placed for 55
         Undefined. Implement with the following snippet:

           Then('a bid should be placed for {int}', async function (int) {
           // Then('a bid should be placed for {float}', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And the bid history should show the automatic bid
         Undefined. Implement with the following snippet:

           Then('the bid history should show the automatic bid', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

108) Scenario: Aggressive strategy immediately bids to maximum # tests/bdd/features/bidding-strategies/auto-bidding.feature:24
     â Before # tests/bdd/support/hooks.js:29
     â Before # tests/bdd/support/hooks.js:83
         Error: Cannot find module '../../src/services/nellisApi'
         Require stack:
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/support/hooks.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/try_require.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/support.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/load_support.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/index.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/cli/index.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/cli/run.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/bin/cucumber.js
             at Function._resolveFilename (node:internal/modules/cjs/loader:1405:15)
             at defaultResolveImpl (node:internal/modules/cjs/loader:1061:19)
             at resolveForCJSWithHooks (node:internal/modules/cjs/loader:1066:22)
             at Function._load (node:internal/modules/cjs/loader:1215:37)
             at TracingChannel.traceSync (node:diagnostics_channel:322:14)
             at wrapModuleLoad (node:internal/modules/cjs/loader:235:24)
             at Module.require (node:internal/modules/cjs/loader:1491:12)
             at require (node:internal/modules/helpers:135:16)
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/support/hooks.js:85:21)
     - Given I am authenticated with a valid token # tests/bdd/step-definitions/auction-monitoring.steps.js:11
     - And the external auction API is available # tests/bdd/step-definitions/auction-monitoring.steps.js:16
     ? Given I am monitoring auction "12345" with config:
         | maxBid   | 200        |
         | strategy | aggressive |
         | autoBid  | true       |
         Undefined. Implement with the following snippet:

           Given('I am monitoring auction {string} with config:', async function (string, dataTable) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When the auction data updates with:
         | currentBid | 50    |
         | isWinning  | false |
         | nextBid    | 55    |
         Undefined. Implement with the following snippet:

           When('the auction data updates with:', async function (dataTable) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then a bid should be placed for 200
         Undefined. Implement with the following snippet:

           Then('a bid should be placed for {int}', async function (int) {
           // Then('a bid should be placed for {float}', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And the auction status should show maxBidReached as true
         Undefined. Implement with the following snippet:

           Then('the auction status should show maxBidReached as true', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

109) Scenario: Sniping strategy waits until last 30 seconds # tests/bdd/features/bidding-strategies/auto-bidding.feature:37
     â Before # tests/bdd/support/hooks.js:29
     â Before # tests/bdd/support/hooks.js:83
         Error: Cannot find module '../../src/services/nellisApi'
         Require stack:
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/support/hooks.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/try_require.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/support.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/load_support.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/index.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/cli/index.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/cli/run.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/bin/cucumber.js
             at Function._resolveFilename (node:internal/modules/cjs/loader:1405:15)
             at defaultResolveImpl (node:internal/modules/cjs/loader:1061:19)
             at resolveForCJSWithHooks (node:internal/modules/cjs/loader:1066:22)
             at Function._load (node:internal/modules/cjs/loader:1215:37)
             at TracingChannel.traceSync (node:diagnostics_channel:322:14)
             at wrapModuleLoad (node:internal/modules/cjs/loader:235:24)
             at Module.require (node:internal/modules/cjs/loader:1491:12)
             at require (node:internal/modules/helpers:135:16)
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/support/hooks.js:85:21)
     - Given I am authenticated with a valid token # tests/bdd/step-definitions/auction-monitoring.steps.js:11
     - And the external auction API is available # tests/bdd/step-definitions/auction-monitoring.steps.js:16
     ? Given I am monitoring auction "12345" with config:
         | maxBid   | 150     |
         | strategy | sniping |
         | autoBid  | true    |
         Undefined. Implement with the following snippet:

           Given('I am monitoring auction {string} with config:', async function (string, dataTable) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When the auction data updates with:
         | currentBid    | 50    |
         | isWinning     | false |
         | timeRemaining | 120   |
         Undefined. Implement with the following snippet:

           When('the auction data updates with:', async function (dataTable) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then no bid should be placed
         Undefined. Implement with the following snippet:

           Then('no bid should be placed', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When the auction data updates with:
         | currentBid    | 60    |
         | isWinning     | false |
         | timeRemaining | 25    |
         Undefined. Implement with the following snippet:

           When('the auction data updates with:', async function (dataTable) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then a bid should be placed for 65
         Undefined. Implement with the following snippet:

           Then('a bid should be placed for {int}', async function (int) {
           // Then('a bid should be placed for {float}', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

110) Scenario: Manual strategy never auto-bids # tests/bdd/features/bidding-strategies/auto-bidding.feature:54
     â Before # tests/bdd/support/hooks.js:29
     â Before # tests/bdd/support/hooks.js:83
         Error: Cannot find module '../../src/services/nellisApi'
         Require stack:
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/support/hooks.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/try_require.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/support.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/load_support.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/index.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/cli/index.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/cli/run.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/bin/cucumber.js
             at Function._resolveFilename (node:internal/modules/cjs/loader:1405:15)
             at defaultResolveImpl (node:internal/modules/cjs/loader:1061:19)
             at resolveForCJSWithHooks (node:internal/modules/cjs/loader:1066:22)
             at Function._load (node:internal/modules/cjs/loader:1215:37)
             at TracingChannel.traceSync (node:diagnostics_channel:322:14)
             at wrapModuleLoad (node:internal/modules/cjs/loader:235:24)
             at Module.require (node:internal/modules/cjs/loader:1491:12)
             at require (node:internal/modules/helpers:135:16)
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/support/hooks.js:85:21)
     - Given I am authenticated with a valid token # tests/bdd/step-definitions/auction-monitoring.steps.js:11
     - And the external auction API is available # tests/bdd/step-definitions/auction-monitoring.steps.js:16
     ? Given I am monitoring auction "12345" with config:
         | maxBid   | 100    |
         | strategy | manual |
         | autoBid  | true   |
         Undefined. Implement with the following snippet:

           Given('I am monitoring auction {string} with config:', async function (string, dataTable) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When the auction data updates with:
         | currentBid | 50    |
         | isWinning  | false |
         Undefined. Implement with the following snippet:

           When('the auction data updates with:', async function (dataTable) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then no bid should be placed
         Undefined. Implement with the following snippet:

           Then('no bid should be placed', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

111) Scenario: Auto-bid respects maximum bid limit # tests/bdd/features/bidding-strategies/auto-bidding.feature:65
     â Before # tests/bdd/support/hooks.js:29
     â Before # tests/bdd/support/hooks.js:83
         Error: Cannot find module '../../src/services/nellisApi'
         Require stack:
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/support/hooks.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/try_require.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/support.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/load_support.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/index.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/cli/index.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/cli/run.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/bin/cucumber.js
             at Function._resolveFilename (node:internal/modules/cjs/loader:1405:15)
             at defaultResolveImpl (node:internal/modules/cjs/loader:1061:19)
             at resolveForCJSWithHooks (node:internal/modules/cjs/loader:1066:22)
             at Function._load (node:internal/modules/cjs/loader:1215:37)
             at TracingChannel.traceSync (node:diagnostics_channel:322:14)
             at wrapModuleLoad (node:internal/modules/cjs/loader:235:24)
             at Module.require (node:internal/modules/cjs/loader:1491:12)
             at require (node:internal/modules/helpers:135:16)
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/support/hooks.js:85:21)
     - Given I am authenticated with a valid token # tests/bdd/step-definitions/auction-monitoring.steps.js:11
     - And the external auction API is available # tests/bdd/step-definitions/auction-monitoring.steps.js:16
     ? Given I am monitoring auction "12345" with config:
         | maxBid   | 100       |
         | strategy | increment |
         | autoBid  | true      |
         Undefined. Implement with the following snippet:

           Given('I am monitoring auction {string} with config:', async function (string, dataTable) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When the auction data updates with:
         | currentBid | 95    |
         | isWinning  | false |
         | nextBid    | 105   |
         Undefined. Implement with the following snippet:

           When('the auction data updates with:', async function (dataTable) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then no bid should be placed
         Undefined. Implement with the following snippet:

           Then('no bid should be placed', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And the auction status should show maxBidReached as true
         Undefined. Implement with the following snippet:

           Then('the auction status should show maxBidReached as true', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

112) Scenario: Auto-bid with SafeMath prevents overflow # tests/bdd/features/bidding-strategies/auto-bidding.feature:78
     â Before # tests/bdd/support/hooks.js:29
     â Before # tests/bdd/support/hooks.js:83
         Error: Cannot find module '../../src/services/nellisApi'
         Require stack:
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/support/hooks.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/try_require.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/support.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/load_support.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/api/index.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/cli/index.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/lib/cli/run.js
         - /home/douglasl/Projects/auction-helper/nellis-auction-backend/node_modules/@cucumber/cucumber/bin/cucumber.js
             at Function._resolveFilename (node:internal/modules/cjs/loader:1405:15)
             at defaultResolveImpl (node:internal/modules/cjs/loader:1061:19)
             at resolveForCJSWithHooks (node:internal/modules/cjs/loader:1066:22)
             at Function._load (node:internal/modules/cjs/loader:1215:37)
             at TracingChannel.traceSync (node:diagnostics_channel:322:14)
             at wrapModuleLoad (node:internal/modules/cjs/loader:235:24)
             at Module.require (node:internal/modules/cjs/loader:1491:12)
             at require (node:internal/modules/helpers:135:16)
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/support/hooks.js:85:21)
     - Given I am authenticated with a valid token # tests/bdd/step-definitions/auction-monitoring.steps.js:11
     - And the external auction API is available # tests/bdd/step-definitions/auction-monitoring.steps.js:16
     ? Given I am monitoring auction "12345" with config:
         | maxBid   | 999999    |
         | strategy | increment |
         | autoBid  | true      |
         Undefined. Implement with the following snippet:

           Given('I am monitoring auction {string} with config:', async function (string, dataTable) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When the auction data updates with:
         | currentBid | 999995  |
         | isWinning  | false   |
         | nextBid    | 1000000 |
         Undefined. Implement with the following snippet:

           When('the auction data updates with:', async function (dataTable) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then no bid should be placed
         Undefined. Implement with the following snippet:

           Then('no bid should be placed', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And the system should log "exceeds max bid"
         Undefined. Implement with the following snippet:

           Then('the system should log {string}', async function (string) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

113) Scenario: Full auction monitoring lifecycle # tests/bdd/features/integration-flows.feature:11
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     â And Redis is available # tests/bdd/step-definitions/integration-flows.steps.js:24
     â And authentication cookies are valid # tests/bdd/step-definitions/integration-flows.steps.js:28
     â Given a user wants to monitor auction "12345" # tests/bdd/step-definitions/integration-flows.steps.js:33
     â When POST /api/auctions/12345/monitor with maxBid: 100 # tests/bdd/step-definitions/integration-flows.steps.js:37
     â Then auction should be added to AuctionMonitor # tests/bdd/step-definitions/integration-flows.steps.js:49
     â And auction should be saved to Redis storage # tests/bdd/step-definitions/integration-flows.steps.js:54
     â And polling should start every 6 seconds # tests/bdd/step-definitions/integration-flows.steps.js:59
     â And WebSocket clients should receive auction state # tests/bdd/step-definitions/integration-flows.steps.js:64
     â When polling interval triggers # tests/bdd/step-definitions/integration-flows.steps.js:69
     â Then NellisApi.getAuctionData should be called
         Multiple step definitions match:
           NellisApi.getAuctionData should be called - tests/bdd/step-definitions/integration-flows.steps.js:74 
           {word} should be called                   - tests/bdd/step-definitions/websocket-handler.steps.js:156
     - And auction data should be updated in memory # tests/bdd/step-definitions/integration-flows.steps.js:78
     - And changes should be persisted to storage # tests/bdd/step-definitions/integration-flows.steps.js:87
     - And WebSocket broadcast should occur # tests/bdd/step-definitions/integration-flows.steps.js:92
     - When update shows user was outbid # tests/bdd/step-definitions/integration-flows.steps.js:97
     - And auto-bid is enabled with increment strategy # tests/bdd/step-definitions/integration-flows.steps.js:102
     - Then bid should be placed automatically # tests/bdd/step-definitions/integration-flows.steps.js:107
     - And bid history should be saved # tests/bdd/step-definitions/integration-flows.steps.js:117
     - And clients should receive bid result # tests/bdd/step-definitions/integration-flows.steps.js:122
     â When auction has 30 seconds remaining
         Multiple step definitions match:
           auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:127
           auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:423
           auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:595
     - Then polling should increase to 2-second intervals # tests/bdd/step-definitions/integration-flows.steps.js:131
     - When auction ends # tests/bdd/step-definitions/integration-flows.steps.js:138
     â Then monitoring should stop
         Multiple step definitions match:
           monitoring should stop - tests/bdd/step-definitions/api-routes.steps.js:244       
           monitoring should stop - tests/bdd/step-definitions/integration-flows.steps.js:143
     - And auction should remain in memory for 60 seconds # tests/bdd/step-definitions/integration-flows.steps.js:148
     - Then auction should be removed completely # tests/bdd/step-definitions/integration-flows.steps.js:154
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

114) Scenario: WebSocket client interaction # tests/bdd/features/integration-flows.feature:43
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     â And Redis is available # tests/bdd/step-definitions/integration-flows.steps.js:24
     â And authentication cookies are valid # tests/bdd/step-definitions/integration-flows.steps.js:28
     â Given a WebSocket client connects # tests/bdd/step-definitions/integration-flows.steps.js:161
     â Then client should receive welcome message with clientId # tests/bdd/step-definitions/integration-flows.steps.js:169
     â When client sends authenticate with valid token # tests/bdd/step-definitions/integration-flows.steps.js:177
     â Then client should be marked as authenticated # tests/bdd/step-definitions/integration-flows.steps.js:185
     â And current monitored auctions should be sent # tests/bdd/step-definitions/integration-flows.steps.js:189
     â When client sends startMonitoring for auction "67890" # tests/bdd/step-definitions/integration-flows.steps.js:197
     â Then auction should be added to monitor # tests/bdd/step-definitions/integration-flows.steps.js:205
     â And client should be subscribed automatically # tests/bdd/step-definitions/integration-flows.steps.js:210
     â And success response should include requestId
         Multiple step definitions match:
           success response should include requestId - tests/bdd/step-definitions/integration-flows.steps.js:215
           success response should include requestId - tests/bdd/step-definitions/websocket-handler.steps.js:101
     - When auction data changes # tests/bdd/step-definitions/integration-flows.steps.js:224
     - Then client should receive auctionState message # tests/bdd/step-definitions/integration-flows.steps.js:233
     - And With complete auction information # tests/bdd/step-definitions/integration-flows.steps.js:241
     - When client sends updateConfig with new maxBid: 200 # tests/bdd/step-definitions/integration-flows.steps.js:246
     - Then auction config should be updated # tests/bdd/step-definitions/integration-flows.steps.js:254
     - And all clients should receive updated state # tests/bdd/step-definitions/integration-flows.steps.js:259
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

115) Scenario: Cookie persistence and recovery # tests/bdd/features/integration-flows.feature:68
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     â And Redis is available # tests/bdd/step-definitions/integration-flows.steps.js:24
     â And authentication cookies are valid # tests/bdd/step-definitions/integration-flows.steps.js:28
     â When POST /api/auth with valid cookies # tests/bdd/step-definitions/integration-flows.steps.js:265
     â Then cookies should be saved to Redis with 24hr TTL # tests/bdd/step-definitions/integration-flows.steps.js:274
     â When server restarts
         Multiple step definitions match:
           server restarts - tests/bdd/step-definitions/integration-flows.steps.js:280
           server restarts - tests/bdd/step-definitions/integration-flows.steps.js:560
     â And NellisApi initializes
         Multiple step definitions match:
           NellisApi initializes - tests/bdd/step-definitions/integration-flows.steps.js:286
           NellisApi initializes - tests/bdd/step-definitions/nellis-api.steps.js:31        
     - Then cookies should be recovered from storage # tests/bdd/step-definitions/integration-flows.steps.js:291
     - And API calls should use recovered cookies # tests/bdd/step-definitions/integration-flows.steps.js:298
     - When POST /api/auth/validate # tests/bdd/step-definitions/integration-flows.steps.js:303
     - Then test auction should be fetched successfully # tests/bdd/step-definitions/integration-flows.steps.js:310
     - And user state should confirm authentication # tests/bdd/step-definitions/integration-flows.steps.js:315
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

116) Scenario: Resilient operation during failures # tests/bdd/features/integration-flows.feature:85
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     â And Redis is available # tests/bdd/step-definitions/integration-flows.steps.js:24
     â And authentication cookies are valid # tests/bdd/step-definitions/integration-flows.steps.js:28
     â Given Redis connection is lost # tests/bdd/step-definitions/integration-flows.steps.js:321
     â When storage operations are attempted # tests/bdd/step-definitions/integration-flows.steps.js:326
     â Then operations should fallback to memory # tests/bdd/step-definitions/integration-flows.steps.js:331
     â And service should continue functioning # tests/bdd/step-definitions/integration-flows.steps.js:335
     â When bid placement fails with CONNECTION_ERROR # tests/bdd/step-definitions/integration-flows.steps.js:339
     â Then retry should occur with exponential backoff
         Multiple step definitions match:
           retry should occur with exponential backoff - tests/bdd/step-definitions/integration-flows.steps.js:347
           retry should occur with exponential backoff - tests/bdd/step-definitions/storage-service.steps.js:51   
     - And Up to configured retry attempts # tests/bdd/step-definitions/integration-flows.steps.js:358
     - When fetching multiple auctions # tests/bdd/step-definitions/integration-flows.steps.js:362
     - And one auction returns 404 # tests/bdd/step-definitions/integration-flows.steps.js:369
     - Then other auctions should still be returned # tests/bdd/step-definitions/integration-flows.steps.js:377
     - And error should be logged but not propagated # tests/bdd/step-definitions/integration-flows.steps.js:386
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

117) Scenario: Global settings affect new auctions # tests/bdd/features/integration-flows.feature:104
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     â And Redis is available # tests/bdd/step-definitions/integration-flows.steps.js:24
     â And authentication cookies are valid # tests/bdd/step-definitions/integration-flows.steps.js:28
     â When POST /api/settings with: # tests/bdd/step-definitions/integration-flows.steps.js:394
         | Setting         | Value   |
         | defaultMaxBid   | 250     |
         | defaultStrategy | sniping |
         | snipeTiming     | 3       |
         | bidBuffer       | 5       |
     â When auction is added without explicit config # tests/bdd/step-definitions/integration-flows.steps.js:404
     â Then auction should use defaultMaxBid of 250 # tests/bdd/step-definitions/integration-flows.steps.js:411
     â And strategy should be sniping # tests/bdd/step-definitions/integration-flows.steps.js:418
     â When auction has 4 seconds remaining
         Multiple step definitions match:
           auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:127
           auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:423
           auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:595
     - Then no bid should be placed yet # tests/bdd/step-definitions/integration-flows.steps.js:428
     â When auction has 2 seconds remaining
         Multiple step definitions match:
           auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:127
           auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:423
           auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:595
     - Then bid should be placed with buffer of 5 # tests/bdd/step-definitions/integration-flows.steps.js:436
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

118) Scenario: Recover complete state after crash # tests/bdd/features/integration-flows.feature:144
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     â And Redis is available # tests/bdd/step-definitions/integration-flows.steps.js:24
     â And authentication cookies are valid # tests/bdd/step-definitions/integration-flows.steps.js:28
     â Given 5 auctions are being monitored
         Multiple step definitions match:
           {int} auctions are being monitored - tests/bdd/step-definitions/api-routes.steps.js:139       
           {int} auctions are being monitored - tests/bdd/step-definitions/integration-flows.steps.js:525
     - And 2 have active bids # tests/bdd/step-definitions/integration-flows.steps.js:536
     - And various polling intervals are set # tests/bdd/step-definitions/integration-flows.steps.js:546
     - When server crashes unexpectedly # tests/bdd/step-definitions/integration-flows.steps.js:551
     â And server restarts
         Multiple step definitions match:
           server restarts - tests/bdd/step-definitions/integration-flows.steps.js:280
           server restarts - tests/bdd/step-definitions/integration-flows.steps.js:560
     - Then storage should be initialized first # tests/bdd/step-definitions/integration-flows.steps.js:565
     - And cookies should be recovered # tests/bdd/step-definitions/integration-flows.steps.js:570
     - And all non-ended auctions should be recovered # tests/bdd/step-definitions/integration-flows.steps.js:577
     - And polling should resume at correct intervals # tests/bdd/step-definitions/integration-flows.steps.js:582
     - And WebSocket clients can reconnect # tests/bdd/step-definitions/integration-flows.steps.js:589
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

119) Scenario: Handle rapid bid changes # tests/bdd/features/integration-flows.feature:160
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     â And Redis is available # tests/bdd/step-definitions/integration-flows.steps.js:24
     â And authentication cookies are valid # tests/bdd/step-definitions/integration-flows.steps.js:28
     â Given auction has 30 seconds remaining
         Multiple step definitions match:
           auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:127
           auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:423
           auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:595
     - And polling is set to 2 seconds # tests/bdd/step-definitions/integration-flows.steps.js:600
     - When 5 bids occur within 10 seconds # tests/bdd/step-definitions/integration-flows.steps.js:604
     - Then each update should trigger auto-bid check # tests/bdd/step-definitions/integration-flows.steps.js:616
     - And increment strategy should respond immediately # tests/bdd/step-definitions/integration-flows.steps.js:621
     - But duplicate bids should be prevented # tests/bdd/step-definitions/integration-flows.steps.js:630
     - And all bid attempts should be logged # tests/bdd/step-definitions/integration-flows.steps.js:637
     - When bid placed at 29 seconds remaining # tests/bdd/step-definitions/integration-flows.steps.js:646
     - Then auction should extend by 30 seconds # tests/bdd/step-definitions/integration-flows.steps.js:654
     - And all clients should be notified of extension # tests/bdd/step-definitions/integration-flows.steps.js:662
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

120) Scenario: Concurrent bid collision # tests/bdd/features/missing-scenarios.feature:11
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Given two users are monitoring the same auction "12345"
         Undefined. Implement with the following snippet:

           Given('two users are monitoring the same auction {string}', async function (string) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And both have auto-bid enabled with increment strategy
         Undefined. Implement with the following snippet:

           Given('both have auto-bid enabled with increment strategy', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When user A is outbid triggering auto-bid
         Undefined. Implement with the following snippet:

           When('user A is outbid triggering auto-bid', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And user B is outbid at the exact same time
         Undefined. Implement with the following snippet:

           When('user B is outbid at the exact same time', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then only one bid should be placed first
         Undefined. Implement with the following snippet:

           Then('only one bid should be placed first', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And the second bid should account for the first
         Undefined. Implement with the following snippet:

           Then('the second bid should account for the first', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And no duplicate bid errors should occur
         Undefined. Implement with the following snippet:

           Then('no duplicate bid errors should occur', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

121) Scenario: Simultaneous auction additions # tests/bdd/features/missing-scenarios.feature:20
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Given 10 users have the extension
         Undefined. Implement with the following snippet:

           Given('{int} users have the extension', async function (int) {
           // Given('{float} users have the extension', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When all users try to monitor auction "12345" simultaneously
         Undefined. Implement with the following snippet:

           When('all users try to monitor auction {string} simultaneously', async function (string) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then only the first request should succeed
         Undefined. Implement with the following snippet:

           Then('only the first request should succeed', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And subsequent requests should receive "already monitoring"
         Undefined. Implement with the following snippet:

           Then('subsequent requests should receive {string}', async function (string) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And no race conditions should corrupt state
         Undefined. Implement with the following snippet:

           Then('no race conditions should corrupt state', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

122) Scenario: WebSocket broadcast during connection surge # tests/bdd/features/missing-scenarios.feature:27
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     - Given 100 clients are connected # tests/bdd/step-definitions/websocket-handler.steps.js:362
     ? When 50 new clients connect simultaneously
         Undefined. Implement with the following snippet:

           When('{int} new clients connect simultaneously', async function (int) {
           // When('{float} new clients connect simultaneously', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And an auction update occurs during connection
         Undefined. Implement with the following snippet:

           When('an auction update occurs during connection', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then all 150 clients should receive the update
         Undefined. Implement with the following snippet:

           Then('all {int} clients should receive the update', async function (int) {
           // Then('all {float} clients should receive the update', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And no messages should be lost
         Undefined. Implement with the following snippet:

           Then('no messages should be lost', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And server should remain responsive
         Undefined. Implement with the following snippet:

           Then('server should remain responsive', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

123) Scenario: Clock skew between server and Nellis # tests/bdd/features/missing-scenarios.feature:37
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Given server clock is 5 seconds behind Nellis
         Undefined. Implement with the following snippet:

           Given('server clock is {int} seconds behind Nellis', async function (int) {
           // Given('server clock is {float} seconds behind Nellis', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And auction has 3 seconds remaining per Nellis
         Undefined. Implement with the following snippet:

           Given('auction has {int} seconds remaining per Nellis', async function (int) {
           // Given('auction has {float} seconds remaining per Nellis', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When server calculates time remaining
         Undefined. Implement with the following snippet:

           When('server calculates time remaining', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then server shows -2 seconds (already ended)
         Undefined. Implement with the following snippet:

           Then('server shows {int} seconds \\(already ended)', async function (int) {
           // Then('server shows {float} seconds \\(already ended)', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And monitoring should handle gracefully
         Undefined. Implement with the following snippet:

           Then('monitoring should handle gracefully', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And not miss last-second bid opportunity
         Undefined. Implement with the following snippet:

           Then('not miss last-second bid opportunity', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

124) Scenario: Daylight saving time transition # tests/bdd/features/missing-scenarios.feature:45
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Given auction ends at 2:00 AM on DST change day
         Undefined. Implement with the following snippet:

           Given('auction ends at {int}:{int} AM on DST change day', async function (int, int2) {
           // Given('auction ends at {int}:{float} AM on DST change day', async function (int, float) {
           // Given('auction ends at {float}:{int} AM on DST change day', async function (float, int) {
           // Given('auction ends at {float}:{float} AM on DST change day', async function (float, float2) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When clocks "spring forward" at 2:00 AM
         Undefined. Implement with the following snippet:

           When('clocks {string} at {int}:{int} AM', async function (string, int, int2) {
           // When('clocks {string} at {int}:{float} AM', async function (string, int, float) {
           // When('clocks {string} at {float}:{int} AM', async function (string, float, int) {
           // When('clocks {string} at {float}:{float} AM', async function (string, float, float2) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then auction end time should adjust correctly
         Undefined. Implement with the following snippet:

           Then('auction end time should adjust correctly', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And no auctions should end an hour early/late
         Undefined. Implement with the following snippet:

           Then('no auctions should end an hour early\\/late', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

125) Scenario: Leap second handling # tests/bdd/features/missing-scenarios.feature:51
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Given auction ends at 23:59:60 (leap second)
         Undefined. Implement with the following snippet:

           Given('auction ends at {int}:{int}:{int} \\(leap second)', async function (int, int2, int3) {
           // Given('auction ends at {int}:{int}:{float} \\(leap second)', async function (int, int2, float) {
           // Given('auction ends at {int}:{float}:{int} \\(leap second)', async function (int, float, int2) {
           // Given('auction ends at {int}:{float}:{float} \\(leap second)', async function (int, float, float2) {
           // Given('auction ends at {float}:{int}:{int} \\(leap second)', async function (float, int, int2) {
           // Given('auction ends at {float}:{int}:{float} \\(leap second)', async function (float, int, float2) {
           // Given('auction ends at {float}:{float}:{int} \\(leap second)', async function (float, float2, int) {
           // Given('auction ends at {float}:{float}:{float} \\(leap second)', async function (float, float2, float3) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When calculating time remaining
         Undefined. Implement with the following snippet:

           When('calculating time remaining', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then system should not crash
         Undefined. Implement with the following snippet:

           Then('system should not crash', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And timing should remain accurate
         Undefined. Implement with the following snippet:

           Then('timing should remain accurate', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

126) Scenario: Memory pressure with many auctions # tests/bdd/features/missing-scenarios.feature:59
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Given system is monitoring 500 auctions
         Undefined. Implement with the following snippet:

           Given('system is monitoring {int} auctions', async function (int) {
           // Given('system is monitoring {float} auctions', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And memory usage is at 80% capacity
         Undefined. Implement with the following snippet:

           Given('memory usage is at {int}% capacity', async function (int) {
           // Given('memory usage is at {float}% capacity', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When garbage collection runs
         Undefined. Implement with the following snippet:

           When('garbage collection runs', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then ended auctions should be cleaned up
         Undefined. Implement with the following snippet:

           Then('ended auctions should be cleaned up', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And memory should be reclaimed
         Undefined. Implement with the following snippet:

           Then('memory should be reclaimed', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And active auctions should be unaffected
         Undefined. Implement with the following snippet:

           Then('active auctions should be unaffected', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

127) Scenario: Redis memory limit reached # tests/bdd/features/missing-scenarios.feature:67
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Given Redis maxmemory is set to 100MB
         Undefined. Implement with the following snippet:

           Given('Redis maxmemory is set to 100MB', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And storage is at 99MB used
         Undefined. Implement with the following snippet:

           Given('storage is at 99MB used', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When saving a new auction
         Undefined. Implement with the following snippet:

           When('saving a new auction', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then eviction policy should activate
         Undefined. Implement with the following snippet:

           Then('eviction policy should activate', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And critical data should be preserved
         Undefined. Implement with the following snippet:

           Then('critical data should be preserved', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And system should remain functional
         Undefined. Implement with the following snippet:

           Then('system should remain functional', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

128) Scenario: File descriptor exhaustion # tests/bdd/features/missing-scenarios.feature:75
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Given system has 1000 file descriptor limit
         Undefined. Implement with the following snippet:

           Given('system has {int} file descriptor limit', async function (int) {
           // Given('system has {float} file descriptor limit', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And 990 WebSocket connections exist
         Undefined. Implement with the following snippet:

           Given('{int} WebSocket connections exist', async function (int) {
           // Given('{float} WebSocket connections exist', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When making HTTP requests to Nellis API
         Undefined. Implement with the following snippet:

           When('making HTTP requests to Nellis API', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then connections should be reused
         Undefined. Implement with the following snippet:

           Then('connections should be reused', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And no EMFILE errors should occur
         Undefined. Implement with the following snippet:

           Then('no EMFILE errors should occur', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

129) Scenario: Split brain with Redis # tests/bdd/features/missing-scenarios.feature:84
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     - Given Redis connection is established # tests/bdd/step-definitions/storage-service.steps.js:76
     ? And auction data is being saved
         Undefined. Implement with the following snippet:

           Given('auction data is being saved', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When network partition occurs
         Undefined. Implement with the following snippet:

           When('network partition occurs', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then memory fallback should activate
         Undefined. Implement with the following snippet:

           Then('memory fallback should activate', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And writes should go to memory
         Undefined. Implement with the following snippet:

           Then('writes should go to memory', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And reads should check both sources
         Undefined. Implement with the following snippet:

           Then('reads should check both sources', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When partition heals
         Undefined. Implement with the following snippet:

           When('partition heals', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then data should reconcile correctly
         Undefined. Implement with the following snippet:

           Then('data should reconcile correctly', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

130) Scenario: Partial WebSocket message delivery # tests/bdd/features/missing-scenarios.feature:94
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Given large auction update (1MB) being sent
         Undefined. Implement with the following snippet:

           Given('large auction update \\(1MB) being sent', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When network interruption occurs mid-message
         Undefined. Implement with the following snippet:

           When('network interruption occurs mid-message', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then partial message should be discarded
         Undefined. Implement with the following snippet:

           Then('partial message should be discarded', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And client should not crash
         Undefined. Implement with the following snippet:

           Then('client should not crash', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And reconnection should restore state
         Undefined. Implement with the following snippet:

           Then('reconnection should restore state', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

131) Scenario: Cookie expiry during active bid # tests/bdd/features/missing-scenarios.feature:103
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Given user is monitoring auction with 1 minute left
         Undefined. Implement with the following snippet:

           Given('user is monitoring auction with {int} minute left', async function (int) {
           // Given('user is monitoring auction with {float} minute left', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And auto-bid is about to trigger
         Undefined. Implement with the following snippet:

           Given('auto-bid is about to trigger', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When authentication cookies expire
         Undefined. Implement with the following snippet:

           When('authentication cookies expire', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then bid should fail with auth error
         Undefined. Implement with the following snippet:

           Then('bid should fail with auth error', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And user should be notified immediately
         Undefined. Implement with the following snippet:

           Then('user should be notified immediately', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And monitoring should pause not stop
         Undefined. Implement with the following snippet:

           Then('monitoring should pause not stop', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

132) Scenario: Multiple authentication attempts # tests/bdd/features/missing-scenarios.feature:111
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Given client sends authenticate message
         Undefined. Implement with the following snippet:

           Given('client sends authenticate message', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When client sends another auth before response
         Undefined. Implement with the following snippet:

           When('client sends another auth before response', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then both requests should be processed
         Undefined. Implement with the following snippet:

           Then('both requests should be processed', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And responses should include correct requestIds
         Undefined. Implement with the following snippet:

           Then('responses should include correct requestIds', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And final state should be consistent
         Undefined. Implement with the following snippet:

           Then('final state should be consistent', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

133) Scenario: Malformed auction data from Nellis # tests/bdd/features/missing-scenarios.feature:120
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Given Nellis API returns corrupted JSON
         Undefined. Implement with the following snippet:

           Given('Nellis API returns corrupted JSON', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When parsing auction data
         Undefined. Implement with the following snippet:

           When('parsing auction data', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then error should be logged with details
         Undefined. Implement with the following snippet:

           Then('error should be logged with details', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And auction should mark as error state
         Undefined. Implement with the following snippet:

           Then('auction should mark as error state', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And monitoring should continue for others
         Undefined. Implement with the following snippet:

           Then('monitoring should continue for others', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

134) Scenario: Redis data corruption # tests/bdd/features/missing-scenarios.feature:127
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Given auction data in Redis is corrupted
         Undefined. Implement with the following snippet:

           Given('auction data in Redis is corrupted', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When loading auctions on startup
         Undefined. Implement with the following snippet:

           When('loading auctions on startup', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then corrupted entries should be skipped
         Undefined. Implement with the following snippet:

           Then('corrupted entries should be skipped', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And valid auctions should load
         Undefined. Implement with the following snippet:

           Then('valid auctions should load', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And corruption should be logged
         Undefined. Implement with the following snippet:

           Then('corruption should be logged', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

135) Scenario: Snipe bid at exact moment auction extends # tests/bdd/features/missing-scenarios.feature:136
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â Given auction has 3 seconds remaining
         Multiple step definitions match:
           auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:127
           auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:423
           auction has {int} seconds remaining - tests/bdd/step-definitions/integration-flows.steps.js:595
     ? And snipe is configured for 5 seconds
         Undefined. Implement with the following snippet:

           Given('snipe is configured for {int} seconds', async function (int) {
           // Given('snipe is configured for {float} seconds', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When bid is placed at 3 seconds
         Undefined. Implement with the following snippet:

           When('bid is placed at {int} seconds', async function (int) {
           // When('bid is placed at {float} seconds', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And auction extends by 30 seconds
         Undefined. Implement with the following snippet:

           When('auction extends by {int} seconds', async function (int) {
           // When('auction extends by {float} seconds', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then strategy should recalculate
         Undefined. Implement with the following snippet:

           Then('strategy should recalculate', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And not bid again immediately
         Undefined. Implement with the following snippet:

           Then('not bid again immediately', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

136) Scenario: Maximum bid reached during increment # tests/bdd/features/missing-scenarios.feature:144
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Given max bid is $100
         Undefined. Implement with the following snippet:

           Given('max bid is ${int}', async function (int) {
           // Given('max bid is ${float}', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And current bid is $95
         Undefined. Implement with the following snippet:

           Given('current bid is ${int}', async function (int) {
           // Given('current bid is ${float}', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When auto-increment would bid $101
         Undefined. Implement with the following snippet:

           When('auto-increment would bid ${int}', async function (int) {
           // When('auto-increment would bid ${float}', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then bid should be capped at $100
         Undefined. Implement with the following snippet:

           Then('bid should be capped at ${int}', async function (int) {
           // Then('bid should be capped at ${float}', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And user should be notified once
         Undefined. Implement with the following snippet:

           Then('user should be notified once', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And no repeated notifications
         Undefined. Implement with the following snippet:

           Then('no repeated notifications', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

137) Scenario: Recover from process crash # tests/bdd/features/missing-scenarios.feature:154
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â Given 50 auctions are being monitored
         Multiple step definitions match:
           {int} auctions are being monitored - tests/bdd/step-definitions/api-routes.steps.js:139       
           {int} auctions are being monitored - tests/bdd/step-definitions/integration-flows.steps.js:525
     ? And various states and timers exist
         Undefined. Implement with the following snippet:

           Given('various states and timers exist', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When process crashes and restarts
         Undefined. Implement with the following snippet:

           When('process crashes and restarts', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then all non-ended auctions should resume
         Undefined. Implement with the following snippet:

           Then('all non-ended auctions should resume', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And polling intervals should be restored
         Undefined. Implement with the following snippet:

           Then('polling intervals should be restored', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And WebSocket clients should reconnect
         Undefined. Implement with the following snippet:

           Then('WebSocket clients should reconnect', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And no duplicate monitoring should occur
         Undefined. Implement with the following snippet:

           Then('no duplicate monitoring should occur', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

138) Scenario: Recover from Redis split-brain # tests/bdd/features/missing-scenarios.feature:163
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Given Redis cluster has split-brain
         Undefined. Implement with the following snippet:

           Given('Redis cluster has split-brain', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And different data exists in each partition
         Undefined. Implement with the following snippet:

           Given('different data exists in each partition', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When split-brain is resolved
         Undefined. Implement with the following snippet:

           When('split-brain is resolved', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then data should merge correctly
         Undefined. Implement with the following snippet:

           Then('data should merge correctly', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And no auction data should be lost
         Undefined. Implement with the following snippet:

           Then('no auction data should be lost', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And latest updates should win
         Undefined. Implement with the following snippet:

           Then('latest updates should win', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

139) Scenario: API response time degradation # tests/bdd/features/missing-scenarios.feature:173
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Given Nellis API responds slowly (5s latency)
         Undefined. Implement with the following snippet:

           Given('Nellis API responds slowly \\(5s latency)', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â And 100 auctions are being monitored
         Multiple step definitions match:
           {int} auctions are being monitored - tests/bdd/step-definitions/api-routes.steps.js:139       
           {int} auctions are being monitored - tests/bdd/step-definitions/integration-flows.steps.js:525
     ? When polling intervals trigger
         Undefined. Implement with the following snippet:

           When('polling intervals trigger', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then requests should not pile up
         Undefined. Implement with the following snippet:

           Then('requests should not pile up', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And system should implement backpressure
         Undefined. Implement with the following snippet:

           Then('system should implement backpressure', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And critical auctions should be prioritized
         Undefined. Implement with the following snippet:

           Then('critical auctions should be prioritized', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

140) Scenario: WebSocket message queue overflow # tests/bdd/features/missing-scenarios.feature:181
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Given 1000 auction updates occur in 1 second
         Undefined. Implement with the following snippet:

           Given('{int} auction updates occur in {int} second', async function (int, int2) {
           // Given('{int} auction updates occur in {float} second', async function (int, float) {
           // Given('{float} auction updates occur in {int} second', async function (float, int) {
           // Given('{float} auction updates occur in {float} second', async function (float, float2) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When broadcasting to 100 clients
         Undefined. Implement with the following snippet:

           When('broadcasting to {int} clients', async function (int) {
           // When('broadcasting to {float} clients', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then message queue should not overflow
         Undefined. Implement with the following snippet:

           Then('message queue should not overflow', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And old messages should be dropped if needed
         Undefined. Implement with the following snippet:

           Then('old messages should be dropped if needed', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And critical messages should be preserved
         Undefined. Implement with the following snippet:

           Then('critical messages should be preserved', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

141) Scenario: Bid increment changes mid-auction # tests/bdd/features/missing-scenarios.feature:190
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Given auction has $5 increment
         Undefined. Implement with the following snippet:

           Given('auction has ${int} increment', async function (int) {
           // Given('auction has ${float} increment', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And auto-bid is configured
         Undefined. Implement with the following snippet:

           Given('auto-bid is configured', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When Nellis changes increment to $10
         Undefined. Implement with the following snippet:

           When('Nellis changes increment to ${int}', async function (int) {
           // When('Nellis changes increment to ${float}', async function (float) {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then next bid should use new increment
         Undefined. Implement with the following snippet:

           Then('next bid should use new increment', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And strategy should adapt
         Undefined. Implement with the following snippet:

           Then('strategy should adapt', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

142) Scenario: Reserve price not met # tests/bdd/features/missing-scenarios.feature:197
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Given auction has hidden reserve price
         Undefined. Implement with the following snippet:

           Given('auction has hidden reserve price', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And current bid is below reserve
         Undefined. Implement with the following snippet:

           Given('current bid is below reserve', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When placing bid above current but below reserve
         Undefined. Implement with the following snippet:

           When('placing bid above current but below reserve', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then bid should be accepted
         Undefined. Implement with the following snippet:

           Then('bid should be accepted', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? But winning status should remain false
         Undefined. Implement with the following snippet:

           Then('winning status should remain false', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And UI should indicate reserve not met
         Undefined. Implement with the following snippet:

           Then('UI should indicate reserve not met', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

143) Scenario: Chrome extension disconnects during bid # tests/bdd/features/missing-scenarios.feature:207
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Given extension is placing bid via WebSocket
         Undefined. Implement with the following snippet:

           Given('extension is placing bid via WebSocket', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When connection drops before response
         Undefined. Implement with the following snippet:

           When('connection drops before response', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then bid result should be queried
         Undefined. Implement with the following snippet:

           Then('bid result should be queried', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And duplicate bid should not be placed
         Undefined. Implement with the following snippet:

           Then('duplicate bid should not be placed', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And result should be saved to history
         Undefined. Implement with the following snippet:

           Then('result should be saved to history', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

144) Scenario: Partial system degradation # tests/bdd/features/missing-scenarios.feature:214
     â Before # tests/bdd/support/hooks.js:29
     â Given all services are initialized # tests/bdd/step-definitions/integration-flows.steps.js:15
     ? And test environment is isolated
         Undefined. Implement with the following snippet:

           Given('test environment is isolated', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Given Redis is down
         Undefined. Implement with the following snippet:

           Given('Redis is down', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And memory fallback is active
         Undefined. Implement with the following snippet:

           Given('memory fallback is active', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? When server needs to restart
         Undefined. Implement with the following snippet:

           When('server needs to restart', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? Then active auctions should be saved to disk
         Undefined. Implement with the following snippet:

           Then('active auctions should be saved to disk', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And recovery should read from disk
         Undefined. Implement with the following snippet:

           Then('recovery should read from disk', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     ? And monitoring should resume
         Undefined. Implement with the following snippet:

           Then('monitoring should resume', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

145) Scenario: Recover cookies from storage on initialization # tests/bdd/features/nellis-api.feature:10
     â Before # tests/bdd/support/hooks.js:29
     â Given the NellisApi service is initialized # tests/bdd/step-definitions/nellis-api.steps.js:11
     â And base URLs are configured correctly # tests/bdd/step-definitions/nellis-api.steps.js:16
     â Given storage contains saved cookies "session=abc123" # tests/bdd/step-definitions/nellis-api.steps.js:22
     â When NellisApi initializes
         Multiple step definitions match:
           NellisApi initializes - tests/bdd/step-definitions/integration-flows.steps.js:286
           NellisApi initializes - tests/bdd/step-definitions/nellis-api.steps.js:31        
     - Then cookies should be loaded from storage # tests/bdd/step-definitions/nellis-api.steps.js:35
     â And "Recovered authentication cookies from storage" should be logged
         Multiple step definitions match:
           {string} should be logged - tests/bdd/step-definitions/nellis-api.steps.js:40        
           {string} should be logged - tests/bdd/step-definitions/websocket-handler.steps.js:105
           {string} should be logged - tests/bdd/step-definitions/websocket-handler.steps.js:441
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

146) Scenario: Handle initialization without saved cookies # tests/bdd/features/nellis-api.feature:16
     â Before # tests/bdd/support/hooks.js:29
     â Given the NellisApi service is initialized # tests/bdd/step-definitions/nellis-api.steps.js:11
     â And base URLs are configured correctly # tests/bdd/step-definitions/nellis-api.steps.js:16
     â Given storage has no saved cookies # tests/bdd/step-definitions/nellis-api.steps.js:27
     â When NellisApi initializes
         Multiple step definitions match:
           NellisApi initializes - tests/bdd/step-definitions/integration-flows.steps.js:286
           NellisApi initializes - tests/bdd/step-definitions/nellis-api.steps.js:31        
     - Then cookies should remain empty # tests/bdd/step-definitions/nellis-api.steps.js:45
     - And service should still initialize successfully # tests/bdd/step-definitions/nellis-api.steps.js:49
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

147) Scenario: Calculate time remaining correctly # tests/bdd/features/nellis-api.feature:30
     â Before # tests/bdd/support/hooks.js:29
     â Given the NellisApi service is initialized # tests/bdd/step-definitions/nellis-api.steps.js:11
     â And base URLs are configured correctly # tests/bdd/step-definitions/nellis-api.steps.js:16
     â Given auction closeTime is "2024-12-31T23:59:59Z" # tests/bdd/step-definitions/nellis-api.steps.js:54
     â And current time is "2024-12-31T23:59:29Z" # tests/bdd/step-definitions/nellis-api.steps.js:58
     â When calculateTimeRemaining is called # tests/bdd/step-definitions/nellis-api.steps.js:76
         ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor
             at new global.Date (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/nellis-api.steps.js:67:7)
             at NellisApi.calculateTimeRemaining (/home/douglasl/Projects/auction-helper/nellis-auction-backend/src/services/nellisApi.js:82:23)
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/nellis-api.steps.js:77:34)
     - Then result should be 30 seconds # tests/bdd/step-definitions/nellis-api.steps.js:80
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

148) Scenario: Save cookies to storage after authentication # tests/bdd/features/nellis-api.feature:43
     â Before # tests/bdd/support/hooks.js:29
     â Given the NellisApi service is initialized # tests/bdd/step-definitions/nellis-api.steps.js:11
     â And base URLs are configured correctly # tests/bdd/step-definitions/nellis-api.steps.js:16
     â When authenticate is called with cookies "new-session=xyz789" # tests/bdd/step-definitions/nellis-api.steps.js:97
     â Then cookies should be saved to storage # tests/bdd/step-definitions/nellis-api.steps.js:102
         AssertionError
             + expected - actual

             +new-session=xyz789

             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/nellis-api.steps.js:106:28)
             at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
     â And "Saved authentication cookies to storage" should be logged
         Multiple step definitions match:
           {string} should be logged - tests/bdd/step-definitions/nellis-api.steps.js:40        
           {string} should be logged - tests/bdd/step-definitions/websocket-handler.steps.js:105
           {string} should be logged - tests/bdd/step-definitions/websocket-handler.steps.js:441
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

149) Scenario: Do not retry non-retryable errors # tests/bdd/features/nellis-api.feature:91
     â Before # tests/bdd/support/hooks.js:29
     â Given the NellisApi service is initialized # tests/bdd/step-definitions/nellis-api.steps.js:11
     â And base URLs are configured correctly # tests/bdd/step-definitions/nellis-api.steps.js:16
     â Given bid fails with BID_TOO_LOW error # tests/bdd/step-definitions/nellis-api.steps.js:368
     â When placeBid is called # tests/bdd/step-definitions/nellis-api.steps.js:331
     â Then no retry should be attempted # tests/bdd/step-definitions/nellis-api.steps.js:384
     â And error should be returned immediately
         Multiple step definitions match:
           error should be returned immediately  - tests/bdd/step-definitions/nellis-api.steps.js:388     
           {word} should be returned immediately - tests/bdd/step-definitions/storage-service.steps.js:372
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

150) Scenario: Legacy polling continues when feature disabled # tests/bdd/features/performance/polling-queue.feature:11
     â Before # tests/bdd/support/hooks.js:29
     â Given I am authenticated with a valid token # tests/bdd/step-definitions/auction-monitoring.steps.js:11
         AssertionError: expected undefined to exist
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/auction-monitoring.steps.js:13:28)
     - And the external auction API is available # tests/bdd/step-definitions/auction-monitoring.steps.js:16
     - Given the polling queue feature is disabled # tests/bdd/step-definitions/polling-queue.steps.js:31
     - When I start monitoring 5 auctions # tests/bdd/step-definitions/polling-queue.steps.js:41
     - Then each auction should have its own polling timer # tests/bdd/step-definitions/polling-queue.steps.js:66
     - And the system should use individual setInterval calls # tests/bdd/step-definitions/polling-queue.steps.js:82
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

151) Scenario: Polling queue manages updates when enabled # tests/bdd/features/performance/polling-queue.feature:18
     â Before # tests/bdd/support/hooks.js:29
     â Given I am authenticated with a valid token # tests/bdd/step-definitions/auction-monitoring.steps.js:11
         AssertionError: expected undefined to exist
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/auction-monitoring.steps.js:13:28)
     - And the external auction API is available # tests/bdd/step-definitions/auction-monitoring.steps.js:16
     - Given the polling queue feature is enabled # tests/bdd/step-definitions/polling-queue.steps.js:36
     - When I start monitoring 5 auctions # tests/bdd/step-definitions/polling-queue.steps.js:41
     - Then all auctions should be added to the polling queue # tests/bdd/step-definitions/polling-queue.steps.js:93
     - And only one polling worker should be active # tests/bdd/step-definitions/polling-queue.steps.js:111
     - And CPU usage should be lower than legacy polling # tests/bdd/step-definitions/polling-queue.steps.js:124
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

152) Scenario: Queue respects auction priority # tests/bdd/features/performance/polling-queue.feature:26
     â Before # tests/bdd/support/hooks.js:29
     â Given I am authenticated with a valid token # tests/bdd/step-definitions/auction-monitoring.steps.js:11
         AssertionError: expected undefined to exist
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/auction-monitoring.steps.js:13:28)
     - And the external auction API is available # tests/bdd/step-definitions/auction-monitoring.steps.js:16
     - Given the polling queue feature is enabled # tests/bdd/step-definitions/polling-queue.steps.js:36
     - And I am monitoring auction "A" ending in 5 minutes # tests/bdd/step-definitions/polling-queue.steps.js:141
     - And I am monitoring auction "B" ending in 30 seconds # tests/bdd/step-definitions/polling-queue.steps.js:162
     - When the polling queue processes updates # tests/bdd/step-definitions/polling-queue.steps.js:183
     - Then auction "B" should be polled before auction "A" # tests/bdd/step-definitions/polling-queue.steps.js:210
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

153) Scenario: Queue handles auction removal # tests/bdd/features/performance/polling-queue.feature:34
     â Before # tests/bdd/support/hooks.js:29
     â Given I am authenticated with a valid token # tests/bdd/step-definitions/auction-monitoring.steps.js:11
         AssertionError: expected undefined to exist
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/auction-monitoring.steps.js:13:28)
     - And the external auction API is available # tests/bdd/step-definitions/auction-monitoring.steps.js:16
     - Given the polling queue feature is enabled # tests/bdd/step-definitions/polling-queue.steps.js:36
     - And I am monitoring 3 auctions in the queue # tests/bdd/step-definitions/polling-queue.steps.js:226
     - When I stop monitoring one auction # tests/bdd/step-definitions/polling-queue.steps.js:234
     - Then the auction should be removed from the queue # tests/bdd/step-definitions/polling-queue.steps.js:245
     - And the queue should continue processing other auctions # tests/bdd/step-definitions/polling-queue.steps.js:255
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

154) Scenario: Queue handles high load efficiently # tests/bdd/features/performance/polling-queue.feature:42
     â Before # tests/bdd/support/hooks.js:29
     â Given I am authenticated with a valid token # tests/bdd/step-definitions/auction-monitoring.steps.js:11
         AssertionError: expected undefined to exist
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/auction-monitoring.steps.js:13:28)
     - And the external auction API is available # tests/bdd/step-definitions/auction-monitoring.steps.js:16
     - Given the polling queue feature is enabled # tests/bdd/step-definitions/polling-queue.steps.js:36
     - When I start monitoring 100 auctions for load testing # tests/bdd/step-definitions/polling-queue.steps.js:268
     - Then the queue should handle all auctions # tests/bdd/step-definitions/polling-queue.steps.js:276
     - And memory usage should remain stable # tests/bdd/step-definitions/polling-queue.steps.js:288
     - And no more than 10 API requests per second should be made # tests/bdd/step-definitions/polling-queue.steps.js:297
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

155) Scenario: Queue recovers from API failures # tests/bdd/features/performance/polling-queue.feature:50
     â Before # tests/bdd/support/hooks.js:29
     â Given I am authenticated with a valid token # tests/bdd/step-definitions/auction-monitoring.steps.js:11
         AssertionError: expected undefined to exist
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/auction-monitoring.steps.js:13:28)
     - And the external auction API is available # tests/bdd/step-definitions/auction-monitoring.steps.js:16
     - Given the polling queue feature is enabled # tests/bdd/step-definitions/polling-queue.steps.js:36
     - And I am monitoring 5 auctions # tests/bdd/step-definitions/polling-queue.steps.js:230
     - When the API becomes unavailable # tests/bdd/step-definitions/polling-queue.steps.js:307
     - Then the queue should continue attempting polls # tests/bdd/step-definitions/polling-queue.steps.js:324
     - And failed polls should be rescheduled # tests/bdd/step-definitions/polling-queue.steps.js:331
     - When the API becomes available again # tests/bdd/step-definitions/polling-queue.steps.js:341
     - Then polling should resume normally # tests/bdd/step-definitions/polling-queue.steps.js:347
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

156) Scenario: Feature flag can be toggled at runtime # tests/bdd/features/performance/polling-queue.feature:60
     â Before # tests/bdd/support/hooks.js:29
     â Given I am authenticated with a valid token # tests/bdd/step-definitions/auction-monitoring.steps.js:11
         AssertionError: expected undefined to exist
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/auction-monitoring.steps.js:13:28)
     - And the external auction API is available # tests/bdd/step-definitions/auction-monitoring.steps.js:16
     - Given I am monitoring 5 auctions with legacy polling # tests/bdd/step-definitions/polling-queue.steps.js:362
     - When I enable the polling queue feature # tests/bdd/step-definitions/polling-queue.steps.js:373
     - Then the system should migrate to queue-based polling # tests/bdd/step-definitions/polling-queue.steps.js:381
     - When I disable the polling queue feature # tests/bdd/step-definitions/polling-queue.steps.js:394
     - Then the system should revert to legacy polling # tests/bdd/step-definitions/polling-queue.steps.js:398
     - And no auctions should be lost during migration # tests/bdd/step-definitions/polling-queue.steps.js:411
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

157) Scenario: Successfully connect to Redis # tests/bdd/features/storage-service.feature:9
     â Before # tests/bdd/support/hooks.js:29
     â Given the StorageService is initialized # tests/bdd/step-definitions/storage-service.steps.js:10
     â Given Redis is available at configured URL # tests/bdd/step-definitions/storage-service.steps.js:16
     â When initialize is called # tests/bdd/step-definitions/storage-service.steps.js:30
     â Then connection should be established # tests/bdd/step-definitions/storage-service.steps.js:34
         AssertionError
             + expected - actual

             -false
             +true

             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/storage-service.steps.js:35:34)
     - And connected flag should be true # tests/bdd/step-definitions/storage-service.steps.js:38
     - And "Redis connected" event should be emitted # tests/bdd/step-definitions/storage-service.steps.js:43
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

158) Scenario: Handle Redis connection with retry strategy # tests/bdd/features/storage-service.feature:16
     â Before # tests/bdd/support/hooks.js:29
     â Given the StorageService is initialized # tests/bdd/step-definitions/storage-service.steps.js:10
     â Given Redis connection fails initially # tests/bdd/step-definitions/storage-service.steps.js:21
     â When initialize is called # tests/bdd/step-definitions/storage-service.steps.js:30
     â Then retry should occur with exponential backoff
         Multiple step definitions match:
           retry should occur with exponential backoff - tests/bdd/step-definitions/integration-flows.steps.js:347
           retry should occur with exponential backoff - tests/bdd/step-definitions/storage-service.steps.js:51   
     - And maximum delay should be 2000ms # tests/bdd/step-definitions/storage-service.steps.js:56
     - And retry attempts should be logged # tests/bdd/step-definitions/storage-service.steps.js:61
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

159) Scenario: Return default settings when none exist # tests/bdd/features/storage-service.feature:99
     â Before # tests/bdd/support/hooks.js:29
     â Given the StorageService is initialized # tests/bdd/step-definitions/storage-service.steps.js:10
     â Given no settings are stored # tests/bdd/step-definitions/storage-service.steps.js:281
     â When getSettings is called # tests/bdd/step-definitions/storage-service.steps.js:286
     â Then default settings should be returned # tests/bdd/step-definitions/storage-service.steps.js:290
     â And default settings should include defaultMaxBid: 100 # tests/bdd/step-definitions/storage-service.steps.js:294
         AssertionError: expected undefined to equal 100
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/storage-service.steps.js:295:51)
     - And defaultStrategy: "increment" # tests/bdd/step-definitions/storage-service.steps.js:298
     - And autoBidDefault: true # tests/bdd/step-definitions/storage-service.steps.js:302
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

160) Scenario: Check Redis health with PING # tests/bdd/features/storage-service.feature:121
     â Before # tests/bdd/support/hooks.js:29
     â Given the StorageService is initialized # tests/bdd/step-definitions/storage-service.steps.js:10
     â Given Redis is connected # tests/bdd/step-definitions/storage-service.steps.js:113
     â When isHealthy is called # tests/bdd/step-definitions/storage-service.steps.js:352
     â Then PING command should be sent # tests/bdd/step-definitions/storage-service.steps.js:356
     â And true returned if response is "PONG" # tests/bdd/step-definitions/storage-service.steps.js:361
         AssertionError
             + expected - actual

             -false
             +true

             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/storage-service.steps.js:364:34)
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

161) Scenario: Authenticate client with valid token # tests/bdd/features/websocket-handler.feature:23
     â Before # tests/bdd/support/hooks.js:29
     â Given the WebSocketHandler is initialized # tests/bdd/step-definitions/websocket-handler.steps.js:11
     â And a WebSocket server is running # tests/bdd/step-definitions/websocket-handler.steps.js:16
     â Given AUTH_TOKEN is "valid-token" # tests/bdd/step-definitions/websocket-handler.steps.js:74
     â When client sends authenticate message with "valid-token" # tests/bdd/step-definitions/websocket-handler.steps.js:79
         TypeError: Cannot set properties of undefined (setting 'authenticated')
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/websocket-handler.steps.js:92:41)
     - Then client.authenticated should be set to true # tests/bdd/step-definitions/websocket-handler.steps.js:96
     â And success response should include requestId
         Multiple step definitions match:
           success response should include requestId - tests/bdd/step-definitions/integration-flows.steps.js:215
           success response should include requestId - tests/bdd/step-definitions/websocket-handler.steps.js:101
     â And "authenticated successfully" should be logged
         Multiple step definitions match:
           {string} should be logged - tests/bdd/step-definitions/nellis-api.steps.js:40        
           {string} should be logged - tests/bdd/step-definitions/websocket-handler.steps.js:105
           {string} should be logged - tests/bdd/step-definitions/websocket-handler.steps.js:441
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

162) Scenario: Reject invalid authentication # tests/bdd/features/websocket-handler.feature:30
     â Before # tests/bdd/support/hooks.js:29
     â Given the WebSocketHandler is initialized # tests/bdd/step-definitions/websocket-handler.steps.js:11
     â And a WebSocket server is running # tests/bdd/step-definitions/websocket-handler.steps.js:16
     â Given AUTH_TOKEN is "valid-token" # tests/bdd/step-definitions/websocket-handler.steps.js:74
     â When client sends authenticate message with "wrong-token" # tests/bdd/step-definitions/websocket-handler.steps.js:79
     â Then authenticated response should have success: false # tests/bdd/step-definitions/websocket-handler.steps.js:110
     â And error should be "Invalid authentication token"
         Multiple step definitions match:
           error should be {string} - tests/bdd/step-definitions/api-routes.steps.js:208       
           error should be {string} - tests/bdd/step-definitions/websocket-handler.steps.js:115
     ? And client.authenticated should remain false
         Undefined. Implement with the following snippet:

           Then('client.authenticated should remain false', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

163) Scenario: Route messages to appropriate handlers # tests/bdd/features/websocket-handler.feature:45
     â Before # tests/bdd/support/hooks.js:29
     â Given the WebSocketHandler is initialized # tests/bdd/step-definitions/websocket-handler.steps.js:11
     â And a WebSocket server is running # tests/bdd/step-definitions/websocket-handler.steps.js:16
     â Given client is authenticated
         Multiple step definitions match:
           client is {word}        - tests/bdd/step-definitions/websocket-handler.steps.js:123
           client is authenticated - tests/bdd/step-definitions/websocket-handler.steps.js:186
     â When client sends message with type "subscribe"
         Multiple step definitions match:
           client sends message with type {string} - tests/bdd/step-definitions/websocket-handler.steps.js:127
           client sends message with type {string} - tests/bdd/step-definitions/websocket-handler.steps.js:413
     - Then handleSubscribe should be called # tests/bdd/step-definitions/websocket-handler.steps.js:156
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

164) Scenario: Route messages to appropriate handlers # tests/bdd/features/websocket-handler.feature:46
     â Before # tests/bdd/support/hooks.js:29
     â Given the WebSocketHandler is initialized # tests/bdd/step-definitions/websocket-handler.steps.js:11
     â And a WebSocket server is running # tests/bdd/step-definitions/websocket-handler.steps.js:16
     â Given client is authenticated
         Multiple step definitions match:
           client is {word}        - tests/bdd/step-definitions/websocket-handler.steps.js:123
           client is authenticated - tests/bdd/step-definitions/websocket-handler.steps.js:186
     â When client sends message with type "startMonitoring"
         Multiple step definitions match:
           client sends message with type {string} - tests/bdd/step-definitions/websocket-handler.steps.js:127
           client sends message with type {string} - tests/bdd/step-definitions/websocket-handler.steps.js:413
     - Then handleStartMonitoring should be called # tests/bdd/step-definitions/websocket-handler.steps.js:156
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

165) Scenario: Route messages to appropriate handlers # tests/bdd/features/websocket-handler.feature:47
     â Before # tests/bdd/support/hooks.js:29
     â Given the WebSocketHandler is initialized # tests/bdd/step-definitions/websocket-handler.steps.js:11
     â And a WebSocket server is running # tests/bdd/step-definitions/websocket-handler.steps.js:16
     â Given client is authenticated
         Multiple step definitions match:
           client is {word}        - tests/bdd/step-definitions/websocket-handler.steps.js:123
           client is authenticated - tests/bdd/step-definitions/websocket-handler.steps.js:186
     â When client sends message with type "stopMonitoring"
         Multiple step definitions match:
           client sends message with type {string} - tests/bdd/step-definitions/websocket-handler.steps.js:127
           client sends message with type {string} - tests/bdd/step-definitions/websocket-handler.steps.js:413
     - Then handleStopMonitoring should be called # tests/bdd/step-definitions/websocket-handler.steps.js:156
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

166) Scenario: Route messages to appropriate handlers # tests/bdd/features/websocket-handler.feature:48
     â Before # tests/bdd/support/hooks.js:29
     â Given the WebSocketHandler is initialized # tests/bdd/step-definitions/websocket-handler.steps.js:11
     â And a WebSocket server is running # tests/bdd/step-definitions/websocket-handler.steps.js:16
     â Given client is authenticated
         Multiple step definitions match:
           client is {word}        - tests/bdd/step-definitions/websocket-handler.steps.js:123
           client is authenticated - tests/bdd/step-definitions/websocket-handler.steps.js:186
     â When client sends message with type "updateConfig"
         Multiple step definitions match:
           client sends message with type {string} - tests/bdd/step-definitions/websocket-handler.steps.js:127
           client sends message with type {string} - tests/bdd/step-definitions/websocket-handler.steps.js:413
     - Then handleUpdateConfig should be called # tests/bdd/step-definitions/websocket-handler.steps.js:156
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

167) Scenario: Route messages to appropriate handlers # tests/bdd/features/websocket-handler.feature:49
     â Before # tests/bdd/support/hooks.js:29
     â Given the WebSocketHandler is initialized # tests/bdd/step-definitions/websocket-handler.steps.js:11
     â And a WebSocket server is running # tests/bdd/step-definitions/websocket-handler.steps.js:16
     â Given client is any # tests/bdd/step-definitions/websocket-handler.steps.js:123
         TypeError: Cannot set properties of undefined (setting 'authenticated')
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/websocket-handler.steps.js:124:39)
     â When client sends message with type "ping"
         Multiple step definitions match:
           client sends message with type {string} - tests/bdd/step-definitions/websocket-handler.steps.js:127
           client sends message with type {string} - tests/bdd/step-definitions/websocket-handler.steps.js:413
     ? Then respond with pong should be called
         Undefined. Implement with the following snippet:

           Then('respond with pong should be called', async function () {
             // Write code here that turns the phrase above into concrete actions
             return 'pending';
           });

     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

168) Scenario: Route messages to appropriate handlers # tests/bdd/features/websocket-handler.feature:50
     â Before # tests/bdd/support/hooks.js:29
     â Given the WebSocketHandler is initialized # tests/bdd/step-definitions/websocket-handler.steps.js:11
     â And a WebSocket server is running # tests/bdd/step-definitions/websocket-handler.steps.js:16
     â Given client is any # tests/bdd/step-definitions/websocket-handler.steps.js:123
         TypeError: Cannot set properties of undefined (setting 'authenticated')
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/websocket-handler.steps.js:124:39)
     â When client sends message with type "authenticate"
         Multiple step definitions match:
           client sends message with type {string} - tests/bdd/step-definitions/websocket-handler.steps.js:127
           client sends message with type {string} - tests/bdd/step-definitions/websocket-handler.steps.js:413
     - Then handleAuthentication should be called # tests/bdd/step-definitions/websocket-handler.steps.js:156
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

169) Scenario: Subscribe to auction updates # tests/bdd/features/websocket-handler.feature:60
     â Before # tests/bdd/support/hooks.js:29
     â Given the WebSocketHandler is initialized # tests/bdd/step-definitions/websocket-handler.steps.js:11
     â And a WebSocket server is running # tests/bdd/step-definitions/websocket-handler.steps.js:16
     â Given client is authenticated
         Multiple step definitions match:
           client is {word}        - tests/bdd/step-definitions/websocket-handler.steps.js:123
           client is authenticated - tests/bdd/step-definitions/websocket-handler.steps.js:186
     - When client subscribes to auction "12345" # tests/bdd/step-definitions/websocket-handler.steps.js:190
     - Then auction ID should be added to client.subscriptions Set # tests/bdd/step-definitions/websocket-handler.steps.js:196
     - And current auction data should be sent if available # tests/bdd/step-definitions/websocket-handler.steps.js:200
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

170) Scenario: Unsubscribe from auction # tests/bdd/features/websocket-handler.feature:66
     â Before # tests/bdd/support/hooks.js:29
     â Given the WebSocketHandler is initialized # tests/bdd/step-definitions/websocket-handler.steps.js:11
     â And a WebSocket server is running # tests/bdd/step-definitions/websocket-handler.steps.js:16
     â Given client is subscribed to auction "12345" # tests/bdd/step-definitions/websocket-handler.steps.js:206
         TypeError: Cannot read properties of undefined (reading 'subscriptions')
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/websocket-handler.steps.js:207:25)
     - When client unsubscribes from auction "12345" # tests/bdd/step-definitions/websocket-handler.steps.js:211
     - Then auction ID should be removed from subscriptions # tests/bdd/step-definitions/websocket-handler.steps.js:216
     - And unsubscribe should be logged # tests/bdd/step-definitions/websocket-handler.steps.js:220
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

171) Scenario: Start monitoring with authentication check # tests/bdd/features/websocket-handler.feature:73
     â Before # tests/bdd/support/hooks.js:29
     â Given the WebSocketHandler is initialized # tests/bdd/step-definitions/websocket-handler.steps.js:11
     â And a WebSocket server is running # tests/bdd/step-definitions/websocket-handler.steps.js:16
     â Given client is not authenticated # tests/bdd/step-definitions/websocket-handler.steps.js:225
         TypeError: Cannot set properties of undefined (setting 'authenticated')
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/websocket-handler.steps.js:226:39)
     - When client tries to start monitoring # tests/bdd/step-definitions/websocket-handler.steps.js:229
     â Then error "Not authenticated" should be sent
         Multiple step definitions match:
           error {string} should be sent - tests/bdd/step-definitions/websocket-handler.steps.js:236
           error {string} should be sent - tests/bdd/step-definitions/websocket-handler.steps.js:404
     - And monitoring should not start # tests/bdd/step-definitions/websocket-handler.steps.js:240
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

172) Scenario: Start monitoring success flow # tests/bdd/features/websocket-handler.feature:79
     â Before # tests/bdd/support/hooks.js:29
     â Given the WebSocketHandler is initialized # tests/bdd/step-definitions/websocket-handler.steps.js:11
     â And a WebSocket server is running # tests/bdd/step-definitions/websocket-handler.steps.js:16
     â Given client is authenticated
         Multiple step definitions match:
           client is {word}        - tests/bdd/step-definitions/websocket-handler.steps.js:123
           client is authenticated - tests/bdd/step-definitions/websocket-handler.steps.js:186
     - When startMonitoring is called for auction "12345" # tests/bdd/step-definitions/websocket-handler.steps.js:244
     â Then auctionMonitor.addAuction should be called
         Multiple step definitions match:
           {word} should be called                    - tests/bdd/step-definitions/websocket-handler.steps.js:156
           auctionMonitor.addAuction should be called - tests/bdd/step-definitions/websocket-handler.steps.js:256
     - And response should include success status # tests/bdd/step-definitions/websocket-handler.steps.js:260
     - And auction should be added to subscriptions # tests/bdd/step-definitions/websocket-handler.steps.js:264
     - And broadcast should occur after 100ms # tests/bdd/step-definitions/websocket-handler.steps.js:268
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

173) Scenario: Update auction configuration # tests/bdd/features/websocket-handler.feature:88
     â Before # tests/bdd/support/hooks.js:29
     â Given the WebSocketHandler is initialized # tests/bdd/step-definitions/websocket-handler.steps.js:11
     â And a WebSocket server is running # tests/bdd/step-definitions/websocket-handler.steps.js:16
     â Given client is authenticated
         Multiple step definitions match:
           client is {word}        - tests/bdd/step-definitions/websocket-handler.steps.js:123
           client is authenticated - tests/bdd/step-definitions/websocket-handler.steps.js:186
     â And auction "12345" is being monitored
         Multiple step definitions match:
           auction {string} is being monitored - tests/bdd/step-definitions/api-routes.steps.js:155       
           auction {string} is being monitored - tests/bdd/step-definitions/websocket-handler.steps.js:274
     - When updateConfig is called with new maxBid # tests/bdd/step-definitions/websocket-handler.steps.js:278
     â Then auctionMonitor.updateAuctionConfig should be called
         Multiple step definitions match:
           auctionMonitor.updateAuctionConfig should be called - tests/bdd/step-definitions/api-routes.steps.js:293       
           {word} should be called                             - tests/bdd/step-definitions/websocket-handler.steps.js:156
           auctionMonitor.updateAuctionConfig should be called - tests/bdd/step-definitions/websocket-handler.steps.js:287
     - And success response should be sent # tests/bdd/step-definitions/websocket-handler.steps.js:291
     - And auction state should be broadcast # tests/bdd/step-definitions/websocket-handler.steps.js:295
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

174) Scenario: Place bid through WebSocket # tests/bdd/features/websocket-handler.feature:97
     â Before # tests/bdd/support/hooks.js:29
     â Given the WebSocketHandler is initialized # tests/bdd/step-definitions/websocket-handler.steps.js:11
     â And a WebSocket server is running # tests/bdd/step-definitions/websocket-handler.steps.js:16
     â Given client is authenticated
         Multiple step definitions match:
           client is {word}        - tests/bdd/step-definitions/websocket-handler.steps.js:123
           client is authenticated - tests/bdd/step-definitions/websocket-handler.steps.js:186
     - When placeBid message is received # tests/bdd/step-definitions/websocket-handler.steps.js:301
     â Then nellisApi.placeBid should be called
         Multiple step definitions match:
           {word} should be called             - tests/bdd/step-definitions/websocket-handler.steps.js:156
           nellisApi.placeBid should be called - tests/bdd/step-definitions/websocket-handler.steps.js:309
     - And result should be sent as bidResult message # tests/bdd/step-definitions/websocket-handler.steps.js:313
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

175) Scenario: Broadcast to specific auction subscribers # tests/bdd/features/websocket-handler.feature:109
     â Before # tests/bdd/support/hooks.js:29
     â Given the WebSocketHandler is initialized # tests/bdd/step-definitions/websocket-handler.steps.js:11
     â And a WebSocket server is running # tests/bdd/step-definitions/websocket-handler.steps.js:16
     â Given 3 clients are subscribed to auction "12345"
         Multiple step definitions match:
           {int} clients are subscribed to auction {string} - tests/bdd/step-definitions/websocket-handler.steps.js:340
           {int} clients are subscribed to auction {string} - tests/bdd/step-definitions/websocket-handler.steps.js:346
     â And 2 clients are subscribed to auction "67890"
         Multiple step definitions match:
           {int} clients are subscribed to auction {string} - tests/bdd/step-definitions/websocket-handler.steps.js:340
           {int} clients are subscribed to auction {string} - tests/bdd/step-definitions/websocket-handler.steps.js:346
     - When broadcastToSubscribers is called for "12345" # tests/bdd/step-definitions/websocket-handler.steps.js:353
     - Then only the 3 subscribed clients should receive message # tests/bdd/step-definitions/websocket-handler.steps.js:358
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

176) Scenario: Skip broadcasting to closed connections # tests/bdd/features/websocket-handler.feature:122
     â Before # tests/bdd/support/hooks.js:29
     â Given the WebSocketHandler is initialized # tests/bdd/step-definitions/websocket-handler.steps.js:11
     â And a WebSocket server is running # tests/bdd/step-definitions/websocket-handler.steps.js:16
     â Given client WebSocket state is not OPEN # tests/bdd/step-definitions/websocket-handler.steps.js:382
         TypeError: Cannot set properties of undefined (setting 'readyState')
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/websocket-handler.steps.js:383:36)
     - When broadcast is attempted # tests/bdd/step-definitions/websocket-handler.steps.js:386
     - Then message should not be sent to that client # tests/bdd/step-definitions/websocket-handler.steps.js:391
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

177) Scenario: Handle malformed messages # tests/bdd/features/websocket-handler.feature:128
     â Before # tests/bdd/support/hooks.js:29
     â Given the WebSocketHandler is initialized # tests/bdd/step-definitions/websocket-handler.steps.js:11
     â And a WebSocket server is running # tests/bdd/step-definitions/websocket-handler.steps.js:16
     â When client sends invalid JSON # tests/bdd/step-definitions/websocket-handler.steps.js:396
     â Then error "Invalid message format" should be sent
         Multiple step definitions match:
           error {string} should be sent - tests/bdd/step-definitions/websocket-handler.steps.js:236
           error {string} should be sent - tests/bdd/step-definitions/websocket-handler.steps.js:404
     â And error should be logged with clientId
         Multiple step definitions match:
           error should be logged with clientId - tests/bdd/step-definitions/websocket-handler.steps.js:408
           error should be logged with clientId - tests/bdd/step-definitions/websocket-handler.steps.js:536
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

178) Scenario: Handle unknown message types # tests/bdd/features/websocket-handler.feature:133
     â Before # tests/bdd/support/hooks.js:29
     â Given the WebSocketHandler is initialized # tests/bdd/step-definitions/websocket-handler.steps.js:11
     â And a WebSocket server is running # tests/bdd/step-definitions/websocket-handler.steps.js:16
     â When client sends message with type "unknown"
         Multiple step definitions match:
           client sends message with type {string} - tests/bdd/step-definitions/websocket-handler.steps.js:127
           client sends message with type {string} - tests/bdd/step-definitions/websocket-handler.steps.js:413
     - Then warning should be logged "Unknown message type" # tests/bdd/step-definitions/websocket-handler.steps.js:420
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

179) Scenario: Clean up on client disconnect # tests/bdd/features/websocket-handler.feature:138
     â Before # tests/bdd/support/hooks.js:29
     â Given the WebSocketHandler is initialized # tests/bdd/step-definitions/websocket-handler.steps.js:11
     â And a WebSocket server is running # tests/bdd/step-definitions/websocket-handler.steps.js:16
     â Given client is connected with subscriptions # tests/bdd/step-definitions/websocket-handler.steps.js:427
         TypeError: Cannot read properties of undefined (reading 'subscriptions')
             at CustomWorld.<anonymous> (/home/douglasl/Projects/auction-helper/nellis-auction-backend/tests/bdd/step-definitions/websocket-handler.steps.js:428:25)
     - When client disconnects # tests/bdd/step-definitions/websocket-handler.steps.js:432
     - Then client should be removed from clients Map # tests/bdd/step-definitions/websocket-handler.steps.js:437
     â And "client disconnected" should be logged
         Multiple step definitions match:
           {string} should be logged - tests/bdd/step-definitions/nellis-api.steps.js:40        
           {string} should be logged - tests/bdd/step-definitions/websocket-handler.steps.js:105
           {string} should be logged - tests/bdd/step-definitions/websocket-handler.steps.js:441
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

180) Scenario: Log WebSocket errors # tests/bdd/features/websocket-handler.feature:166
     â Before # tests/bdd/support/hooks.js:29
     â Given the WebSocketHandler is initialized # tests/bdd/step-definitions/websocket-handler.steps.js:11
     â And a WebSocket server is running # tests/bdd/step-definitions/websocket-handler.steps.js:16
     â When WebSocket emits error event # tests/bdd/step-definitions/websocket-handler.steps.js:531
     â Then error should be logged with clientId
         Multiple step definitions match:
           error should be logged with clientId - tests/bdd/step-definitions/websocket-handler.steps.js:408
           error should be logged with clientId - tests/bdd/step-definitions/websocket-handler.steps.js:536
     â After # tests/bdd/support/hooks.js:103
     â After # tests/bdd/support/hooks.js:42
     â After # tests/bdd/step-definitions/websocket-handler.steps.js:542
     â After # tests/bdd/step-definitions/storage-service.steps.js:459
     â After # tests/bdd/step-definitions/nellis-api.steps.js:400
     â After # tests/bdd/step-definitions/integration-flows.steps.js:673
     â After # tests/bdd/step-definitions/api-routes.steps.js:482

246 scenarios (38 failed, 71 ambiguous, 71 undefined, 66 passed)
1497 steps (28 failed, 109 ambiguous, 447 undefined, 243 skipped, 670 passed)
0m00.945s (executing steps: 0m00.673s)
