name: Security Audit & Dependency Updates

on:
  schedule:
    # Run security audit daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      audit_type:
        description: 'Type of security audit'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - docker
          - code

env:
  NODE_VERSION: '18'

jobs:
  # NPM Security Audit
  npm-security-audit:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    if: github.event.schedule || github.event.inputs.audit_type == 'full' || github.event.inputs.audit_type == 'dependencies'
    strategy:
      matrix:
        package: [backend, dashboard]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run Security Audit - ${{ matrix.package }}
        working-directory: ./${{ matrix.package }}
        run: |
          echo "üîç Running security audit for ${{ matrix.package }}..."
          
          # Install dependencies to get accurate audit
          npm ci
          
          # Run audit and capture output
          npm audit --audit-level=moderate --json > audit-report.json || true
          
          # Parse and display results
          if [ -s audit-report.json ]; then
            # Extract vulnerability count
            VULNERABILITIES=$(cat audit-report.json | jq -r '.metadata.vulnerabilities | to_entries[] | "\(.key): \(.value)"' | paste -sd ', ' -)
            
            echo "Vulnerabilities found: $VULNERABILITIES"
            
            # Check for high/critical vulnerabilities
            HIGH_CRITICAL=$(cat audit-report.json | jq -r '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical')
            
            if [ "$HIGH_CRITICAL" -gt 0 ]; then
              echo "üö® High or critical vulnerabilities found!"
              cat audit-report.json | jq -r '.vulnerabilities[] | select(.severity == "high" or .severity == "critical") | "- \(.title) (\(.severity)): \(.url)"'
            else
              echo "‚úÖ No high or critical vulnerabilities found"
            fi
          fi

      - name: Upload Audit Report
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-${{ matrix.package }}-${{ github.run_number }}
          path: ${{ matrix.package }}/audit-report.json
          retention-days: 30

      - name: Check for Critical Vulnerabilities
        working-directory: ./${{ matrix.package }}
        run: |
          if [ -s audit-report.json ]; then
            CRITICAL=$(cat audit-report.json | jq -r '.metadata.vulnerabilities.critical // 0')
            HIGH=$(cat audit-report.json | jq -r '.metadata.vulnerabilities.high // 0')
            
            if [ "$CRITICAL" -gt 0 ]; then
              echo "üí• Critical vulnerabilities found in ${{ matrix.package }}!"
              exit 1
            elif [ "$HIGH" -gt 5 ]; then
              echo "‚ö†Ô∏è Many high vulnerabilities found in ${{ matrix.package }}!"
              exit 1
            fi
          fi

  # Docker Security Scan
  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event.schedule || github.event.inputs.audit_type == 'full' || github.event.inputs.audit_type == 'docker'
    strategy:
      matrix:
        service: [backend, dashboard]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Image for Scanning
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          target: production
          tags: nellis-${{ matrix.service }}:security-scan
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy Security Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: nellis-${{ matrix.service }}:security-scan
          format: 'sarif'
          output: trivy-${{ matrix.service }}-results.sarif

      - name: Upload Trivy Scan Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: trivy-${{ matrix.service }}-results.sarif
          category: docker-${{ matrix.service }}

      - name: Run Trivy for Human-Readable Output
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image nellis-${{ matrix.service }}:security-scan \
            --severity HIGH,CRITICAL --format table

  # Code Security Analysis
  code-security-analysis:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    if: github.event.schedule || github.event.inputs.audit_type == 'full' || github.event.inputs.audit_type == 'code'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          queries: security-extended

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"

      - name: Run Semgrep Security Analysis
        run: |
          pip install semgrep
          semgrep --config=auto --json --output=semgrep-results.json . || true

      - name: Upload Semgrep Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-results-${{ github.run_number }}
          path: semgrep-results.json
          retention-days: 30

  # Dependency Update Check
  dependency-update-check:
    name: Dependency Update Check
    runs-on: ubuntu-latest
    if: github.event.schedule || github.event.inputs.audit_type == 'full' || github.event.inputs.audit_type == 'dependencies'
    strategy:
      matrix:
        package: [backend, dashboard]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check for Outdated Dependencies
        working-directory: ./${{ matrix.package }}
        run: |
          echo "üì¶ Checking for outdated dependencies in ${{ matrix.package }}..."
          
          npm ci
          npm outdated --json > outdated-report.json || true
          
          if [ -s outdated-report.json ] && [ "$(cat outdated-report.json)" != "{}" ]; then
            echo "Outdated dependencies found:"
            cat outdated-report.json | jq -r 'to_entries[] | "- \(.key): \(.value.current) ‚Üí \(.value.latest)"'
            
            # Check for major version updates
            MAJOR_UPDATES=$(cat outdated-report.json | jq -r 'to_entries[] | select(.value.current | split(".")[0] != (.value.latest | split(".")[0])) | .key' | wc -l)
            
            if [ "$MAJOR_UPDATES" -gt 0 ]; then
              echo "‚ö†Ô∏è Major version updates available (manual review required)"
            fi
          else
            echo "‚úÖ All dependencies are up to date"
          fi

      - name: Upload Outdated Report
        uses: actions/upload-artifact@v4
        with:
          name: outdated-${{ matrix.package }}-${{ github.run_number }}
          path: ${{ matrix.package }}/outdated-report.json
          retention-days: 30

  # Security Configuration Check
  security-config-check:
    name: Security Configuration Check
    runs-on: ubuntu-latest
    if: github.event.schedule || github.event.inputs.audit_type == 'full'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Environment Security
        run: |
          echo "üîí Checking security configuration..."
          
          # Check for exposed secrets in example files
          echo "Checking for potential secrets in example files..."
          if grep -r "password\|secret\|key\|token" --include="*.example" --include="*.env*" . | grep -v "your-" | grep -v "example" | grep -v "test-"; then
            echo "‚ö†Ô∏è Potential secrets found in configuration files"
          else
            echo "‚úÖ No obvious secrets in configuration files"
          fi
          
          # Check Docker security
          echo "Checking Docker security configuration..."
          if grep -r "privileged: true" docker-compose*.yml; then
            echo "‚ö†Ô∏è Privileged containers found"
          fi
          
          if grep -r "user: root" docker-compose*.yml; then
            echo "‚ö†Ô∏è Root user containers found"
          fi
          
          # Check nginx security headers
          if [ -f "nginx/conf.d/nellis-auction.conf" ]; then
            echo "Checking nginx security headers..."
            SECURITY_HEADERS=(
              "X-Frame-Options"
              "X-Content-Type-Options"
              "X-XSS-Protection"
              "Strict-Transport-Security"
              "Content-Security-Policy"
            )
            
            for header in "${SECURITY_HEADERS[@]}"; do
              if grep -q "$header" nginx/conf.d/nellis-auction.conf; then
                echo "‚úÖ $header configured"
              else
                echo "‚ö†Ô∏è $header missing"
              fi
            done
          fi

      - name: Check File Permissions
        run: |
          echo "üîê Checking file permissions..."
          
          # Check for world-writable files
          if find . -type f -perm -002 -not -path "./.git/*" -not -path "./node_modules/*"; then
            echo "‚ö†Ô∏è World-writable files found"
          else
            echo "‚úÖ No world-writable files found"
          fi
          
          # Check for executable scripts
          find . -name "*.sh" -not -path "./.git/*" -not -path "./node_modules/*" | while read script; do
            if [ -x "$script" ]; then
              echo "‚úÖ $script is executable"
            else
              echo "‚ö†Ô∏è $script is not executable"
            fi
          done

  # Generate Security Report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [npm-security-audit, docker-security-scan, code-security-analysis, dependency-update-check, security-config-check]
    if: always()
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./security-reports

      - name: Generate Security Summary
        run: |
          echo "# Security Audit Report" >> $GITHUB_STEP_SUMMARY
          echo "Generated: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| NPM Security Audit | ${{ needs.npm-security-audit.result }} | Dependency vulnerabilities |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Security Scan | ${{ needs.docker-security-scan.result }} | Container image vulnerabilities |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Security Analysis | ${{ needs.code-security-analysis.result }} | Static code analysis |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Updates | ${{ needs.dependency-update-check.result }} | Outdated package check |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Configuration | ${{ needs.security-config-check.result }} | Configuration security review |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Recommendations" >> $GITHUB_STEP_SUMMARY
          
          # Check for failures and add recommendations
          if [[ "${{ needs.npm-security-audit.result }}" == "failure" ]]; then
            echo "- üö® **NPM vulnerabilities found**: Review and update vulnerable dependencies" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.docker-security-scan.result }}" == "failure" ]]; then
            echo "- üö® **Docker vulnerabilities found**: Update base images and review Dockerfile security" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- üìÖ **Regular updates**: Keep dependencies and base images updated" >> $GITHUB_STEP_SUMMARY
          echo "- üîç **Monitor**: Set up automated security monitoring" >> $GITHUB_STEP_SUMMARY
          echo "- üõ°Ô∏è **Security headers**: Ensure all security headers are properly configured" >> $GITHUB_STEP_SUMMARY

      - name: Check Critical Issues
        run: |
          if [[ "${{ needs.npm-security-audit.result }}" == "failure" || 
                "${{ needs.docker-security-scan.result }}" == "failure" ]]; then
            echo "üö® Critical security issues found!"
            echo "Please review the detailed reports and take immediate action."
            exit 1
          fi
          echo "‚úÖ No critical security issues found"

  # Create Security Issue (if vulnerabilities found)
  create-security-issue:
    name: Create Security Issue
    runs-on: ubuntu-latest
    needs: [npm-security-audit, docker-security-scan]
    if: failure() && (needs.npm-security-audit.result == 'failure' || needs.docker-security-scan.result == 'failure')
    steps:
      - name: Create Security Issue
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            const issueBody = `
            # üö® Security Vulnerabilities Detected
            
            **Detection Date**: ${new Date().toISOString()}
            **Workflow Run**: ${context.runId}
            
            ## Summary
            Our automated security audit has detected vulnerabilities that require immediate attention.
            
            ## Affected Areas
            ${needs['npm-security-audit'].result === 'failure' ? '- üì¶ NPM Dependencies' : ''}
            ${needs['docker-security-scan'].result === 'failure' ? '- üê≥ Docker Images' : ''}
            
            ## Action Required
            1. Review the workflow run details: ${context.payload.repository.html_url}/actions/runs/${context.runId}
            2. Download and review security reports from artifacts
            3. Update vulnerable dependencies/images
            4. Re-run security audit to verify fixes
            
            ## Priority
            This issue has been automatically created due to security vulnerabilities. Please address promptly.
            
            ---
            *This issue was automatically created by the Security Audit workflow*
            `;
            
            await github.rest.issues.create({
              owner,
              repo,
              title: `üö® Security Vulnerabilities Detected - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: ['security', 'bug', 'high-priority']
            });