name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  CACHE_VERSION: v1
  
jobs:
  # Code Quality and Security Scanning
  lint-and-security:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            dashboard/package-lock.json

      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci

      - name: Install Dashboard Dependencies
        working-directory: ./dashboard
        run: npm ci

      - name: Run ESLint (Backend)
        working-directory: ./backend
        run: npm run lint --if-present || echo "ESLint not configured"

      - name: Run ESLint (Dashboard)
        working-directory: ./dashboard
        run: npm run lint --if-present || echo "ESLint not configured"

      - name: Security Audit (Backend)
        working-directory: ./backend
        run: npm audit --audit-level=high --production

      - name: Security Audit (Dashboard)
        working-directory: ./dashboard
        run: npm audit --audit-level=high --production

  # Unit Tests - Fast feedback
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Cache Backend node_modules
        uses: actions/cache@v4
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-backend-${{ env.CACHE_VERSION }}-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-backend-${{ env.CACHE_VERSION }}-

      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run Unit Tests
        working-directory: ./backend
        run: npm run test:unit
        env:
          NODE_ENV: test
          AUTH_TOKEN: test-token

      - name: Upload Unit Test Coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage-${{ matrix.node-version }}
          path: backend/coverage/
          retention-days: 7

  # Integration Tests - With Redis service
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Cache Backend node_modules
        uses: actions/cache@v4
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-backend-${{ env.CACHE_VERSION }}-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-backend-${{ env.CACHE_VERSION }}-

      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci

      - name: Install Redis CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools

      - name: Wait for Redis
        run: |
          timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'

      - name: Run Integration Tests
        working-directory: ./backend
        run: npm run test:integration
        env:
          NODE_ENV: test
          AUTH_TOKEN: test-token
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          TEST_TIMEOUT: 30000

      - name: Upload Integration Test Coverage
        uses: actions/upload-artifact@v4
        with:
          name: integration-coverage
          path: backend/coverage/
          retention-days: 7

  # BDD Tests - Cucumber scenarios
  bdd-tests:
    name: BDD Tests (Cucumber)
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Cache Backend node_modules
        uses: actions/cache@v4
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-backend-${{ env.CACHE_VERSION }}-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-backend-${{ env.CACHE_VERSION }}-

      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci

      - name: Install Redis CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools

      - name: Wait for Redis
        run: |
          timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'

      - name: Run BDD Tests
        working-directory: ./backend
        run: |
          if [ -f "cucumber.js" ]; then
            npx cucumber-js --config cucumber.js --format json:cucumber-report.json --format progress
          else
            echo "BDD tests not yet configured - skipping"
            exit 0
          fi
        env:
          NODE_ENV: test
          AUTH_TOKEN: test-token
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Upload BDD Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bdd-results
          path: |
            backend/cucumber-report.json
            backend/coverage/
          retention-days: 7

  # E2E Tests - Puppeteer with Chrome
  e2e-tests:
    name: E2E Tests (Puppeteer)
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            dashboard/package-lock.json

      - name: Cache Backend node_modules
        uses: actions/cache@v4
        with:
          path: backend/node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-backend-${{ env.CACHE_VERSION }}-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-backend-${{ env.CACHE_VERSION }}-

      - name: Cache Dashboard node_modules
        uses: actions/cache@v4
        with:
          path: dashboard/node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-dashboard-${{ env.CACHE_VERSION }}-${{ hashFiles('dashboard/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-dashboard-${{ env.CACHE_VERSION }}-

      - name: Install Backend Dependencies
        working-directory: ./backend
        run: npm ci

      - name: Install Dashboard Dependencies
        working-directory: ./dashboard
        run: npm ci

      - name: Install Chrome Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev \
            libatk-bridge2.0-dev \
            libgtk-3-dev \
            libx11-xcb-dev \
            libxcomposite-dev \
            libxcursor-dev \
            libxdamage-dev \
            libxi-dev \
            libxtst-dev \
            libnss3-dev \
            libxrandr-dev \
            libxss-dev

      - name: Install Redis CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools

      - name: Wait for Redis
        run: |
          timeout 30 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'

      - name: Start Backend Service
        working-directory: ./backend
        run: |
          npm start &
          echo $! > backend.pid
          # Wait for backend to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
        env:
          NODE_ENV: test
          AUTH_TOKEN: test-token
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          PORT: 3000

      - name: Start Dashboard Service
        working-directory: ./dashboard
        run: |
          npm start &
          echo $! > dashboard.pid
          # Wait for dashboard to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3001; do sleep 2; done'
        env:
          NODE_ENV: test
          PORT: 3001
          BACKEND_URL: http://localhost:3000

      - name: Run E2E Tests
        working-directory: ./backend
        run: |
          if [ -f "jest.config.puppeteer.js" ]; then
            npm run test:e2e || npm test -- --config=jest.config.puppeteer.js
          else
            echo "E2E tests not yet configured - skipping"
            exit 0
          fi
        env:
          NODE_ENV: test
          AUTH_TOKEN: test-token
          BACKEND_URL: http://localhost:3000
          DASHBOARD_URL: http://localhost:3001
          HEADLESS: true

      - name: Stop Services
        if: always()
        run: |
          if [ -f backend/backend.pid ]; then kill $(cat backend/backend.pid) || true; fi
          if [ -f dashboard/dashboard.pid ]; then kill $(cat dashboard/dashboard.pid) || true; fi

      - name: Upload E2E Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: |
            backend/coverage/
            backend/screenshots/
            backend/videos/
          retention-days: 7

  # Dashboard Tests
  dashboard-tests:
    name: Dashboard Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: dashboard/package-lock.json

      - name: Cache Dashboard node_modules
        uses: actions/cache@v4
        with:
          path: dashboard/node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-dashboard-${{ env.CACHE_VERSION }}-${{ hashFiles('dashboard/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-dashboard-${{ env.CACHE_VERSION }}-

      - name: Install Dashboard Dependencies
        working-directory: ./dashboard
        run: npm ci

      - name: Run Dashboard Tests
        working-directory: ./dashboard
        run: npm test
        env:
          NODE_ENV: test

      - name: Upload Dashboard Test Coverage
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-coverage
          path: dashboard/coverage/
          retention-days: 7

  # Docker Build and Test
  docker-build-test:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [lint-and-security, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.CACHE_VERSION }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ env.CACHE_VERSION }}-

      - name: Build Backend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile
          push: false
          target: production
          tags: nellis-backend:test
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Build Dashboard Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./dashboard
          push: false
          target: production
          tags: nellis-dashboard:test
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Test Docker Compose Configuration
        run: |
          # Test that docker-compose files are valid
          docker-compose -f docker-compose.yml config
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml config
          docker-compose -f docker-compose.yml -f docker-compose.monitoring.yml config

      - name: Test Docker Image Security
        run: |
          # Check for vulnerabilities in built images
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image nellis-backend:test --exit-code 1 --severity HIGH,CRITICAL || echo "Security scan completed with warnings"

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # Coverage Report Aggregation
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, bdd-tests, dashboard-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download All Coverage Reports
        uses: actions/download-artifact@v4
        with:
          path: ./coverage-reports

      - name: Install Coverage Tools
        run: npm install -g nyc

      - name: Merge Coverage Reports
        run: |
          mkdir -p merged-coverage
          # Copy all coverage files to a single directory
          find coverage-reports -name "*.json" -path "*/coverage/*" -exec cp {} merged-coverage/ \;
          # Generate merged report if files exist
          if [ "$(ls -A merged-coverage/)" ]; then
            npx nyc merge merged-coverage merged-coverage.json
            npx nyc report --reporter=html --reporter=text --reporter=lcov --temp-dir=. merged-coverage.json
          else
            echo "No coverage files found to merge"
          fi

      - name: Upload Merged Coverage
        uses: actions/upload-artifact@v4
        with:
          name: merged-coverage
          path: |
            coverage/
            merged-coverage.json
          retention-days: 30

      - name: Comment Coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const coverage = JSON.parse(fs.readFileSync('merged-coverage.json', 'utf8'));
              // Add coverage comment logic here
              console.log('Coverage data available for PR comment');
            } catch (error) {
              console.log('No coverage data available');
            }

  # Test Results Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint-and-security, unit-tests, integration-tests, bdd-tests, e2e-tests, dashboard-tests, docker-build-test]
    if: always()
    steps:
      - name: Test Results Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality & Security | ${{ needs.lint-and-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| BDD Tests | ${{ needs.bdd-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dashboard Tests | ${{ needs.dashboard-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build & Test | ${{ needs.docker-build-test.result }} |" >> $GITHUB_STEP_SUMMARY

      - name: Check Overall Success
        run: |
          if [[ "${{ needs.lint-and-security.result }}" == "failure" || 
                "${{ needs.unit-tests.result }}" == "failure" || 
                "${{ needs.integration-tests.result }}" == "failure" ]]; then
            echo "Critical tests failed!"
            exit 1
          fi
          echo "All critical tests passed!"